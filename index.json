{"project": "modin", "project_url": "https://modin.readthedocs.io/", "show_commit_url": "https://github.com/modin-project/modin/commit/", "hash_length": 8, "revision_to_hash": {"29": "45be5033b1d8578bd9af39ac18a973054bb46c21", "44": "cc47fdd73684b50397da91694be2351ab1bc3175", "52": "cccea0bed17349727ba13376ee7cc62ac5619852", "103": "26833bb8e7c1dcbab348c63ae9ad88d98c21c4de", "119": "acf323c9d56b779d6b71b4facf70bb1392c775d0", "142": "afff86c6f75af0b6b2427faa7398ca68a5edf466", "147": "a0dd74299f03e362f41f9c7c629a8e345e665bc7", "159": "8d4efd0ce85a4f7297b344ad691f78ee355daf23", "233": "0c218246a97f09cfc3fdc90926230dd2a1b1934a", "246": "79c111337ef2d0f6240821619a70e4583cf846d0", "269": "ff8960e1aeada95d3e09cd30bcd53e386b56ecaf", "278": "50a7a27b9ca7ad82ef43163053c4b37fc2793b6c", "284": "7ee7a98496328a450e6854f5e78cdfcd06a260e8", "343": "09ff0c2e4e28e01c2625c05d9a23fd043c693b96", "356": "2ab1170df4a6e8ae4ca9d5a51554f921884794e9", "359": "c1c985ae179ee425c637021efb1cb31fc719970e", "380": "588272bf2c9811cbfd08da810a5b2ec7f83e65c0", "406": "a351907e94e44027a56afe008171e3396370681d", "428": "ac2c9da232efad0a0066698f65804f01681e7986", "444": "3caf783d5ad4501c0489c088b7bb2fa5a54f128b", "457": "cf7be8c9eaf6732a0d3240aebbf5f40982002e36", "478": "9966f6821155285b784b0670cb4e1b91a243b63d", "554": "6aac82bc06d8fd57d603d11ca62a966973839610", "582": "90191f115e0ad57394598551fd2fd2ee8f70ed43", "589": "9e1b699dc129140be2fd6e9276bbe090fe7c06ab", "685": "27b68f2cb91fa9d435152b873e3437a22ae7c709", "874": "4d35e7076a938b2cc327ce8d6e1922dd69bcff00", "962": "03a919eab67492a5e41ecc712051beb37c75598b", "963": "a244a564b4faea100555606069e90d998ab878fe", "964": "4d80bd8e163f6e628e2d9b4ce6d933b7aad65b48", "965": "0d1a74e2d389f427f85ee062357c83c7e31bc88e", "966": "c43a58096580efcc37c669c13e8385291e4fdbe3", "967": "3ca282158939f28d14b34ba0610c9f2269d57bb0", "993": "81cf80c45febec2187b14dc428d7a6848ca98bb5", "994": "b867edfba345e5f3c28398274b876d7b31f5a5ba", "995": "4ea6f9347a2c97041481a966e376cdb25c1977ff", "996": "f35b7a4f54727319bd7a3be125082ae1a24e2729", "997": "dd42a40679575be87fc770a3fc10886fb3e0b5e0", "998": "14827d382cb56f4b3925374936e2a250bc8cff68", "999": "633a8b0442471559a90c6217ba5839fb4c7c6f6a", "1000": "3ddd5c0bee9252e98f721e62091d051bf0b608dc", "1001": "363da6dfcf1998fd1ade5917e8743c8579fb6753", "1002": "f6b60404f66a98c1371791178f86613e362e52f9", "1003": "790b1962dd379ea340e27ff1d9c75a0b014d7ca0", "1004": "ff6ff0d47dd1331c4a7a16907e6541bb9af68023", "1005": "826699e1c28059e1109d1c62b433b9a45f358f56", "1006": "badecb4268bbe80f81c48ccfb07e3ef2fc6f96be", "1007": "587a46636331c95afc57e4219c3b873896a8a387", "1008": "4d75a6d840d2c2c5117628e261d9f9edcc410f8d", "1009": "1cf36e3b2a54eb5926ef4f5b4c32f319a00e31ba", "1010": "ac85a49b6954e0a70c5c60a2cd7a3a542e501d06", "1011": "0768600f993afec67ed0bd2251d54abdf357b425", "1012": "c7e947be7c5e2ef9093f6d35bec84b7fbfcba9ad", "1013": "333e32c80e41307093e18451328d77c8525e3e6b", "1014": "2f658e0c9292f6e26606466f0f1db2e7fac235e0", "1015": "51edadb3fc61d7b53d008b2e0dc1cfa5d9a85c4f", "1016": "7d6eef9b49f4d6b7d9f6875a94d91b8f9470b0c6", "1017": "03fe0d6afa492a4a89bb9116ac61d713864c1c46", "1018": "3a6dc67dae1d8c4ab0bee36afe6cbd2d574f7075", "1019": "3ea0edb5f612d6d15a566e4dd1d8a246348865c2", "1020": "8265b719e01ee482c269f44d60f8fd3aa590c21f", "1021": "a9c6e500e986ae94de6ab56ef39e8ff38f516965", "1022": "9325ee556e859a9297ef78e6691709c04977738b", "1023": "0c0b6f64bc9c6afc1267fe9fc703a0e30d783f96", "1024": "b370489dd2fffd6a975646c26749b20c9076de89", "1025": "06cc5a40dee55cc2e43e2b1bcbc7097d927e26c7", "1026": "6489e7a2ca40e6eaa0732ae06e6d61b4a75adc40", "1027": "110873007e8cb7421cc7bede9f5315fb3ae5e856", "1028": "9c03512adb4ee650fffd574d900bd0d22c1ebf5c", "1029": "dd27013733d93f527d0826e5cc6cd6d0f7c7a167", "1030": "6140c81496d6d45239240ccc8efe23ed3ff4a3de", "1031": "847d4a35eab2c07bac992bcb0eb4f40a9ce9c55b", "1032": "0f54983a7e94024ea3134c071ed1a295e78f795a", "1033": "2ca3f34b2c3c22bf285c0349d35a5099de3a2e78", "1034": "df725d2810504ee9ea836ccc7ddb43c6d4a01fe7", "1035": "d308c58b675e4af733ffa37e4119829c83992345", "1036": "51ed0ae345cb19b1bb5ea23f73ce9b9ef9fb392f", "1037": "c955d506c3599dd324a5649b69fc50554b78243d", "1038": "1d846206920c0c81e0352683280a58d07e8ea137", "1039": "e09607374d1d3e14274292e9112c13a1521f229e", "1040": "90adc7d7cbbb424c27f0618b94cb006af06dc5e7", "1041": "b49cc682376f8a8ebe35d8e5447bda16b146a0e5", "1042": "cf986fd50182cdbecdd70bc7080bdf5853c8730a", "1043": "d0c84590798f33358dc896eef9d7cd9c519b6289", "1044": "a112b9420834b36d13330bb2f3e30bf1ca838f7b", "1045": "c70a521bafbe11895a913987c0e9a321c2cc2278", "1046": "ca8e7b5955527abbe0c7927febbe29d205d7daff", "1047": "f46382c31d2bea7706e6242143817f955e1eac52", "1048": "cebce3e3bca9f92f53ecb4dc667654ff21b75b72", "1049": "eaa77aa72fd9fc56435a286d269ebc3baca07282", "1050": "c753b2ce826380cc9d42016e64dab619dda7ec9e", "1051": "4d85b6677db780c57d3e485e932fa1502f7deb2f", "1052": "7c350dd9d4fcd43f637663eac15e6a1bfbf151e2", "1053": "966ad234e5eab23cd67ee1ff262229522b52c389", "1054": "291cc30860f2eda3e2c9cea5eb61b5fdb6cc6ed8", "1055": "7105d32d5573df269e459e9fd7f4dcc4a34141d7", "1056": "f82fc67c70f4fbc99b0f82a2729bae93d22486f5", "1057": "572cdf19ff8bec365077b315428090ae1714a2e1", "1058": "d0fb96f7bc43ba43419fb50c9ba72455d2ecca04", "1059": "dbc7445be6bba7881fb53104bf0f41ba6491e0bb", "1060": "41dee033fa822d140d6f71e9e7a09339e0237ca0", "1061": "455252405eb50feb1430aff241549ecd1344d586", "1062": "50723cfdd9e46031ec889f7fcc9094f713de6ac8", "1063": "c21351c553d500da53787852563766782ff0cebf", "1064": "1aa91be7ad4f7aa3cf633bfde0e7e8bc6610a7ea", "1065": "fe0afedd051f9aa721d27a63fcb8c67df32d9768", "1066": "107b47e71bd9d7bc0bd77e18d97882d3697e870d", "1067": "99e8f01abe0c23ee91c1774e23a42a0bb85a6911", "1068": "f35074c1037b946ba663cabbd0ce9cad0a1567fe", "1069": "0dde13f97a439345f235655190874ec92057ab82", "1070": "dcc687748e436acfa513c5370d2417ba9f15a7f4", "1071": "3a3a95574260f57827102f71341a12fe5df72d75", "1072": "48d0e0c2436fe4064b611ad412b686701f104535", "1073": "5872cf3bd4d07df17e244fa046bfe5a91b4d7bd6", "1074": "70faaa5afd678594a2bdd235c22be4f2728e0f73", "1075": "1dab6c9539baba14d3207f5a201c680e2437c3fb", "1076": "c1b7a3ba26feafcfc0d965451228b992b23387b7", "1077": "5447f7eee30eec3f63dbe823e00e0edd39f00b5b", "1078": "80cecf0a9d0868edc12a21ad2e022010437428d3", "1079": "cc096ab24b1ecfc28599148f76bc6f150c49c332", "1080": "4a0c719b69ec8be7cdc195f66bb4c3abc455244b", "1081": "623de5c3c90f9d44262f5ce4e9d7bae6d54e5dc8", "1082": "dfe52660e7a2821510b5ad8561f655b6b74c6d73", "1083": "5b6f73a98cc0ee5a78503704b98b7268709dc797", "1084": "6f1e0c04b22a82f7a24271a5e9d4139cc5ee5537", "1085": "0e200c6219547ec20aad43718d5ec6d3ea501a3b", "1086": "f1fe8fea62f1d05d036a4fa01994afd5a5b96615", "1087": "392c87d54b52198c07157edee841a8bf279eb94e", "1088": "398cf08e1ce67eec2a65dae605313e9e17e7fd09", "1089": "bd8f73a9b9fe8f8b60842fbbc0ea11a0572d479b", "1090": "a625211037b1294b5105d84d5addf4513e956898", "1091": "3d4897ddfed1237565e41cb68eb907eb7bf11309", "1092": "bfc37797850d23ce0e7053b61ea7d24d31d03f4b", "1093": "b0ef05c352f5ad7d811ab4251773068509aa7556", "1094": "cc57954466804bd7363ac4f5fe4d9967f7a1a169", "1095": "0a3bea4a719470690abd7673f9e81a34a64a4de8", "1096": "499fc96cd2d50441dbf376fec84d52828c6b6700", "1097": "dd691cd0d4bb5403b38242563ed8b6ddb316734a", "1098": "37e9d1bf271fcd79e208b7c631c62ae96a2d3aa6", "1099": "001b2201c0d61ac62122d770de90c084af5644d3", "1100": "6827400e5d06fac54bf2ebd5cbd6eec3ab1e60af", "1101": "d2b6f001ae3b204a9c249863a23a88cd4ecd6633", "1102": "8cecda6adc5987762c3627f859d88e3b3ccd9252", "1103": "014818d2637589cf012cbca21935798db722120c", "1104": "896f5b6e456fc7565fc2dea59af479b4b1739e1c", "1105": "849578318ccf83f408c20060eac4883aac6dd6aa", "1106": "7cf26b260df015e900da7c28fa1ea1471b51dda2", "1107": "3fd16a9c1ab6b0f481e7060f0d52e97676af9dba", "1108": "c680077cda844011037951f051ef1b178a660dd6", "1109": "39d69ab28c9dbfb81410aec310e893999ef5fda5", "1110": "544de0d92f4a56de9942daea003add147ebdc98a", "1111": "b514d6f4ca4bdc233ee6aef42a419eab84e958c2", "1112": "64b94f58e0026ecf9b7fd66c04e1cdfe63af82f5", "1113": "6697e05531621a9b3b0209fb6ee8292fed54bd79", "1114": "55e345951818761ad26711cde91bb0d2b296aa5f", "1115": "60d4956cdf381ad4ac43f10281624bc6500383a8", "1116": "a0a3ebb0b4ec218a90ef0d08d440fd7f0faabfab", "1117": "e63c04283b0fdbed584e32abb6f0f8eec5d7167f", "1118": "e685b8db3686885b0ffba11fa8dace5179e90bbf", "1119": "a571e10e00f3dc966f2ff001b2ba4dee322b95e9", "1120": "8866ca8ac8551740b6858744e909e5e9938982bc", "1121": "a7d30932a9fe7075be12d5bbed65f4ac6dabe08e", "1122": "5c5a8e024f5b62cb2386352ea6382521706eac09", "1123": "5cabeb915d2e632ae864666961282e8ed7178e5c", "1124": "ed69517eb5f2ab58ac0e328d0dcac66db426e6fa", "1125": "23b4408648880a4d4ad17dff4b15ae4d34a7c91e", "1126": "e2f628ca7b4361291fac23e994a2f3ff4d070160", "1127": "9d3ead885959c4b1c37bf257bd4aa31c774a071c", "1128": "e08386b424dc2f62f03da82faf59d2e6cd9ba331", "1131": "737ec340f74dfd7f06ea73343c1ea7236bc25edd", "1142": "a3e06c795a982db5848a5e27d7a30eab5f82f9d3", "1144": "fc3485273ff89b10c8559b08626ce2eb2198b345", "1145": "a13384c83808e018b5b17ed4aa372efaa38c4551", "1146": "3395b595d5bb460fecfd706c7d098b4610c9c9dd", "1150": "b424036555f7c7a6806f85d63a75cdcc3a6eb45b", "1155": "5c9398c23da933043045cb9636e19216f834ae2d", "1156": "86ebc316b8aeda692f5e2abee4e7c64ec74a2697", "1171": "f7f1f7ac553dc3cc6595204fb7566db0e8f7f85f", "1172": "0c40d61646b00393ce6a9ffaeac75878c77c64eb", "1173": "e5556b5c531b52546a76690bc976aa90995862a7", "1174": "0aada32d3adf35c87b1b384c47a0f11f142009fb", "1175": "fd5d47657f2f4d79cb1bddd217b3e09160b7127d", "1176": "24678d0a5fc0c3afad162f7fd0f30f7a49c41680", "1177": "ce2bea8867739ea792cdda0dce8ad50e366ebae1", "1178": "3f65c89db7fa9e744df8c26f391b2c9ea6ddcdb5", "1179": "c863b3d5afe8a84734ad4b325c949cafd4bb2bc5", "1180": "f571f69cd7300730d9a7a134f6f47a7aacd71a52", "1181": "797205084fbd1da8651dd6e9a30fd7c671ed6d94", "1182": "372422b69be20c7553b6ec6bd2b92aa748b2c92c", "1183": "299ba18c66678e85481cb251c5053140db2e9b73", "1184": "f273121e7a0e3f2efdcd83f33e7f4ff2e5da47a7", "1185": "db794e00c021a7488c7a32d38e12e04fb9e5441f", "1186": "7458746187d047efc4212f3cf53f9c4a0a0aed6a", "1187": "c2e7f9ecb6a31cd0d59f4ce17dacb059980c45f7", "1188": "031f444fe22ff23ed6c87d2575f8ab9dfb472fcd", "1189": "d710a16c2896024fe5b7c743555935e973b4cfaf", "1190": "7c46bddcca4cad05b44381393ac578934673971e", "1196": "ebbb6b27df2703c27b85f5730e0344f6dd813897", "1198": "1a8cd0a3765df4cd9f76480e9862f522818333b2", "1199": "787d2b1cb40db80a43bdb0dd77c021f5d2dbb01a", "1200": "da83b62142944985acb571829a2dad9afbc49ecd", "1201": "f98a7b3a741a13ef4a2c25b5a2375475dea4e3bf", "1202": "d13fe74d452af2dcefa762a4b5e76f26157a568d", "1203": "d8d58bbdbb0986770bf1903f8d4077849b15e71f", "1204": "126f2a5b56b8758123b9d09da570fc90b4dda7cf", "1207": "ee39d1767efb363fe6c147fc701b41315eee3afa", "1208": "bd602849f86ad07811eb584f3b0b847ef1fa6d9f", "1209": "cee481bfececb75033a86babb8d5f13d289f3442", "1210": "9d9dc297d1bd96da8ce940f0cb785eaa0d9487cf", "1211": "6f5cdc6dfa29de4cc606a2b19900f63467ff7b61", "1212": "3e629062cfc810d8cec43ac6ddb5463b16e8ff4d", "1213": "43df818381b4bcfb8f3cdb2e789f3a6cf4e856c1", "1214": "c5aac3ef99d14305ea9a130e14155fc37495e199", "1215": "db0f18ca4dbb89cd6a9aadae6cc17a4ea0b4b9d4", "1216": "ba507a294a50c70589612c89ec10c0953b723dfa", "1217": "af627dda4b64d2ceba9a354bac5b3e40e24e43bf", "1218": "439e17d4d135293220ffc754f16d019c7f8ad7d7", "1219": "3106e4929c033a7bc95acd404bf1bf6ab4f1ae86", "1220": "bcab1cc903151a7fa52dca7c90730fcf12f04ab7", "1221": "9a6695d3b36cb6c21e835b10d62f26a474583f15", "1222": "ff9bdbf7ddd218fb00994e7add5c2be6d5a56f34", "1223": "477c5f689d08c851feb669ab6a81b4983db0cc57", "1224": "7cfc85c311fbe91c653285c46639352dd9ae4321", "1225": "d6637304a24f986b5abb12e2b525bc3af97d6cac", "1226": "4292d55121b6d93d51b4af27637b0bf9402984cc", "1227": "d720579bfa35bc322f11907c4511eb3ccf57fbd9", "1228": "01fbe9fb12d1ac7d13761d359d3d58cb6346a167", "1229": "6d420fbd74fa62934cacd50791fffe4338ca48da", "1230": "5f03eb8b1e887f9f3b6990fb023576070d0e6cee", "1231": "199666638bbc0f3950fa526c3889be011d567bfa", "1232": "fb94254f4a43e15c8c22e57caf3071979d9fbb4d", "1233": "2f880c1c93b05dbcaf8120ef6bb75a6adfa2e8e5", "1234": "ad55231c29be7f5e9ead1364e564e81be400fe97", "1235": "31d063276c19732f090dff71e5aa438ddac0a6f9", "1236": "6caa7b4a60e516bde2f6295d7bdb78919f15acce", "1237": "4f26fc1260717907ade24973a9c5a064a6810c85", "1238": "09d7c180f603a3079ef9aceb50ac6fdd2cb56bbe", "1239": "f2a7271d555b8909fdb88e951ffc4f110bb7529c", "1240": "03ea9b2c3728a83cd9247a89b72677409cdc7dfd", "1241": "9cb165dd889b9507820c84532b5ba613ac5edb9a", "1242": "e99b629da1a6748c5d675a2d904fcd943cd5964b", "1243": "5ad5fa352d133cc84a3f8cf09c9dc41d824444a0", "1244": "3e1258f83fcd704def172daff3c6e0090a9c039a", "1245": "a5417e83d911ec9aae92f9c681dd03a7c677beaa", "1246": "b0f92b8ba6ce708d94894e2a0cda507a0189f5fb", "1247": "e25a5e0e949ebfa90e3cea1d03685e77bccfc3eb", "1248": "9495ff71965dd6677b3151394616d2c131baf4f9", "1249": "1b3e9d9c52fa4b6bdc9c0ba704899ed0911a7894", "1250": "90e118305aa829f51d776085aee0cd9921c30346", "1251": "77d40ce26a0052a9739a677521efd0b5b9d8048c", "1252": "16fa188219a20cc18a57bf03e7374f4260983c78", "1253": "0f4ce8a585e5ac10c714267d40f728c3ecf2e205", "1254": "5990e069136a5a12f56997d354d1577279824d0f", "1255": "3a3168382fb18f2a41de8858bac0f566415946a9", "1256": "7525f05ead7625d24fd0d208449169e7081795e4", "1257": "c637d89e7bd45385c24a290cba63d3d7eb94b219", "1258": "b93b8794c335628c7744e0ec35adfd2396e7aff6", "1259": "e74e01279b8c1b6d01652e2e24a060e3ee47b919", "1260": "8a50c4a147de94b10bf098b5f540d22c43c76268", "1261": "5cb3283531322f5ad709f1c9a3f618953b2aab32", "1262": "6f1fe69743b07acee231c013858acf922834ee81", "1263": "a54875acbbe9e5db17b38f42fe236f3fe51207f4", "1264": "569337bd40505ff7f25dd498b81ce49d3c707a70", "1265": "a1238a076297adc45003238dc96da13ba02a6898", "1266": "ba823606b9600cb3c632c5448a140ca248ca841a", "1267": "f14a3c187fd2349348e74c9e5095884371ef8645", "1268": "04cd9121df9d9329c15fc4a032768fe5999975b2", "1269": "a2ecf3190dad78e43f77d6132d835ef22dfb3382", "1270": "33a57e376ce8ff19ca6aeab5d3a8de7c775a7adf", "1271": "7935c59a94fafc7a975d62809c04a32a6c05c98f", "1273": "8ebbad9bca36aba0ddfc58dac89b9a66b0bfe41a", "1275": "1f3b514cbc019ece28a89d66f27584db30759888", "1276": "ad0bcaba488f87eba1120ae75981f1b5d24eb0ed", "1279": "c9a8c9cd3f78ec8af03c5e238c8085c79cc3ad5d", "1281": "d390f56afeabb7238a7b39f215a163e04e162d1f", "1283": "f9cf1403bae47a5eff774aadd1574d1c578065a3", "1284": "479ca1972e75869c4b57f5c64441b12717307227", "1289": "07f1cc79931bb94b1836cdbbe423a86cf6feafa2", "1293": "954f84a205597e2f198024b4fd83d1ff75940016", "1294": "4a0130cb3c3b3d274daa6cab65bb799a39f4d2f6", "1295": "8152a4d0ed2c8669b43e2632e364befe05153766", "1296": "77c9d1f72bd9fe497cb159d8e67b84a35210d2e5", "1302": "be33e95a4f35051afc683e187518a3ada6df95a2", "1308": "3652d19ce6768f9cb739f784d4c96d0d2d55ea06", "1309": "6f983ef0c855b9bb39df1803e6a4369bb0322b6e", "1310": "2e12eed8ccaab56ee77b4aa26af592fe3056315c", "1311": "63b41697489d1005f7a4341c81b37897bf1e23c9", "1312": "7c3218fd9a28b9612228d0dcd694693842ac971e", "1313": "1982eef964b7a9398fb9aaa439cb032889082662", "1314": "a44aa225a079ce210c01d91342418894793ef3c0", "1315": "caa10993a589b2cb642ce5bd8bc5a8221d00879e", "1316": "db784d55b17092c33794c3849cfe698f0cb9a7f7", "1318": "27beedb34a8ce64b86160e591ce054bc684810fc", "1319": "d3875c382fe4fa2c0925f14d37871782a7e8a1f9", "1320": "21707d2dd8c51404db692e27fb1a69203440d2eb", "1321": "5d1399f144eae699968f7d3ba0584f8e41f941da", "1322": "d1ce361987d2d1b2fd0237b902098131236cac6f", "1323": "7c31a374ca3e767ffe8e390d6748c31f3a427ec9", "1324": "695c0d467fc383a9098b81eb1acab0f7d0f96711", "1325": "6287b30430a6649b7b5111efa93967a0419a7388", "1326": "4ec633e84c2824f239a154131a48a8fff954da91", "1327": "596675bd856f0a14894c6fe134ca266678c5dc59", "1328": "7e7aff48344c76202099826354ccc33173fd08d6", "1329": "7005388204c07e40aeb5765529e4c601faf3fdd0", "1330": "c1ad0997fa0468efb980731a5212f28e604a7575", "1331": "9a048ac760fbef98baedd4bf2bbe22fd4cfba441", "1332": "3fc76f36935911ce49636330c9621c1a3d25f5a2", "1333": "c23b3ceb8e085b403c036bc9070b6d757b42926e", "1334": "07c2f86c890f31532ee49bf091cef4e8b036b0bd", "1335": "4ba870ea2639610f2a27af0713fb6dbc58649d61", "1336": "01ba1f40c032e92f16dd6f276e238baf5473bda7", "1337": "15eed059383b6d07851edba7da0f49778d35774f", "1338": "763b05ccb1841c3bec8e9f7e3df276c4ef8b35c6", "1339": "46ab2bf78309d5e94f06d9d376dcd6abe916944a", "1340": "86108ed94975b58756826a71074db30fa08cd562", "1341": "dc4d8d6d67a05de7b83b2de36c7fc2702ccb56cf", "1343": "3bc9d1c752de4424d5400c22c57cd9025fef34d1", "1344": "b7e1188f7ba01e3a313996e092a65b63f6b76fa0", "1345": "3de608449ce55521c8f6a089943e4ffec2797a23", "1346": "ffea4ee2d3556dc48c05dac7abb54b62c66f3153", "1347": "a613f2d10a59c7a23fbae7b899c3a6c21d2c0c35", "1348": "5aa59582fc3d2fc73e7f04f6d486e118915ac89f", "1351": "bf4104f7ac206001c81accc983ef0184ab50aacb", "1352": "8fe4be960440e2bac952491685c9e86c64715b78", "1353": "80754f072f1139e9fe81409a64bf09b0a9ac33a0", "1354": "29e6ad884578f1e32f473ceef4e5d5363e0bc8a8", "1355": "626446e6999fde43ff32cbee5df1b1c147d6d7b2", "1356": "1fd5eee3c76f78390c1a9947b147cb1d20caf0b6", "1357": "c7ff5da002fd9aa8d6c6b6d3edfdb876a30ac520", "1358": "1918dd6fbcee3642630d07b698ef61e5b77ee60a", "1359": "18dc8f83e2ce4668e44042c56954ba15cc893e4f", "1360": "c98b8751e9d75e864e11a35d1ca6f4d180589e44", "1363": "4041a4d3e3e5bdb012c6d98bbfc39c1f5bd527fa", "1365": "e4fa1409d6ee048dcdcafc092a10bdc90d965303", "1366": "a74f80aff960c9b60b6fb82d68081e42542e09a0", "1367": "408afcab254988dedf36c8f84accef22ea604f6c", "1368": "4857d1a1c14c72051f17a3029ef9c70a77ecc1ed", "1371": "e62c3679acecbefc5d4e195eeee960d05bc34f06", "1372": "e3459a85f51dc7d72fafad758865c397bba0a50a", "1373": "6bc748e6e835ecfb6e9779aa93cbd47c2f412511", "1374": "563f26d031d3b50b02d1b7a1540dc11a009350cc", "1375": "b1c6e75f4c8442195e8551b561ba62479cac75c4", "1376": "a059c83444d6cfeda0d62c404723901f355d6f28", "1380": "172c2b017f8051dbcde394335f9208f512b0f02a", "1382": "54ba4c62c2e6d48705c13ba2506295f025d9a5b1", "1383": "a3ddf2f01163a312416d2a8bc456ba9582ae9b4d", "1384": "64d6cb064feac23ed5bfa0cba221f35c512c114e", "1385": "a00d5ab5bd6e26813598ca6d4be9d4545f50718d", "1386": "df43d87af261c81cc7c406c0cba9c48b14e4779d", "1387": "653d5b235ffe373b1416fc8049c1080db89bc156", "1388": "6475c9ed4f900a6dc482ad9d74189968df2cd731", "1389": "eead862aab7947969e5dbc483dae49a9ee42c92c", "1390": "6e648e75c16efaac8fc394fc7fe91894e7bfcca4", "1391": "51658b49b54ce89f1277f8b73bdef4cf909e53fd", "1393": "8165051b1bafb1b6dc3cc6069449637c60071f66", "1394": "4b02a0119d4abb94e57e61def43b8295b2bcb38f", "1395": "b0ec3d1a823749cbd1d9b7bdde78d30bbcb1f50a", "1397": "cf259f1cd38c70e246fd5e3ea904b675a5d10bd9", "1401": "7b401caf5fd0cc20f454c927fd472a4307bf4030", "1402": "8d1790cab1985e15868d77ae0471bd35e0bfcd6c", "1403": "f9c99c3817d35f7bf0d91df9aa9644545ea27517", "1405": "f5f057a840cbe1dcf09e01b70bfb96216a4dc74d", "1407": "1e619be11eb7bf430c7429ce9f43742b0b27d700", "1408": "4a267c4748983f4ddc3b30d7fabd824f9053dfb5", "1412": "e74cde994bef969abd307ad146e6a5d00847ce51", "1415": "478e449ba514a9479dbf695993cd1a25cb460ea3", "1417": "3269431a1a7d2366d43723f144d949c708bac03e", "1418": "b6131c592d2e340269f8647b2a3f021122f49e83", "1419": "89f6cdde56abf5dcf9561ea6721fb31f84a855d5", "1420": "a946564e1586060ba9233e1607999aed80be9e78", "1421": "e4e330ae8759e283b2d2ec4cb973ef4048c8cce8", "1422": "e633a32c2706f75fbbdf852deace9e3384b31086", "1423": "c6393b54639b75ad38f028ba06c6eb1e43bfb790", "1424": "51d3e3cfd53dc8a15eba64e11171f6fed7ab6d85", "1425": "d210a017f5f98b50e4d6f38fc5a0e69eaf1136d3", "1426": "8b3794851480b084eb1ca518ac196ebeae2045da", "1427": "027e1fba53286bf8b7ceccd11b8c6d04ff5b9ab3", "1428": "421f68c11a6cc7734fa956362250de0002ff3d2e", "1429": "0a1b18889b8a350469bd0472393dfb9ccac4718b", "1430": "50457cc21eef4e1f6039657b54037b4178f84144", "1431": "3fb4f7612bba90605c1d553809eb367312d43f2e", "1432": "6c23a23f3b4d2d83d57219ec8a0c94f6932f259a", "1433": "19c550a9286e7af7125b829445f880c710f56a5e", "1435": "9b94cb27bd7ea0b28ce6e6a163c056c3fa38d609", "1436": "e561a516217abbf630e89f794c838fb878c30a5f", "1437": "b1a494eda49aa008770983e9cf619ff532da09d2", "1438": "04fc7873f7a1c211f6e0d301eb2b0d41afd9f880", "1439": "7727c23adc58c470b6008dc38519da7d21c3ac0b", "1441": "9ec2a586c1b0b39c498965d0a5a295b9000dbb3c", "1442": "45f64535464b8a669336fbd8c46bd68f199f3bbf", "1444": "b58663bd8f2c8802bb45d7bafa2cc65ae988f959", "1445": "d03ed30868fb042bbc7282b9c9574145e1228eeb", "1446": "54898ef78e83209fba3233606841ca988e531aee", "1448": "521b62e28df5b08c7bb364a7d5c703d210e51e2f", "1449": "bded2e968a0057b1d448aec1957986fdc650d906", "1450": "f7e799a6e4bb6b38cb999ca606d3892a6dbb066f", "1455": "d44d77867daa0325faf26a766eaafa5fa04ac5d5", "1456": "a762913068166c6e59502a50d41a51e449daab16", "1457": "b0f27c969709acf8f8e2e0cabc771043f6f312c4", "1458": "ed46099c53f9236e328f56280631aa93e64ec1d1", "1459": "58290507100fadec409cf199f9c075b997f4a119", "1461": "ecf2a44bb7cf8cd0976e1eee6728274684364ae3", "1462": "1868903db4af256254912e261feff976e3323ed3", "1463": "17fe65507811b7d26e6bb46e761a9dafa87c4ead", "1464": "fe12b146cd9b84e05d50e3f352cecb3a6bcf31ab", "1465": "f74eec3b2c807d13721d367f62ee3ba18dcd0ba7", "1466": "0a78bef1e9ce70df0da0ce68af10987c8bcacb20", "1467": "64f6ee13ae01acbecbb45bc0cfdedf2fa02762f5", "1468": "0bc409d6ae294986db5f7db19d082622544fb122", "1469": "57bcfc130e9fbe93d41aa6403b80782ef49eb9db", "1470": "253ecd98d91d636243d1ba33e7981a4fca9f053b", "1471": "cf4733375c51c241c4444a2ea16c47fda4abf00c", "1472": "cdf47ac1747743fea72fe3450563e870d1a457b3", "1475": "e48ac35d4b632d21a5b297b09d9140ed0a5820a1", "1477": "7631defe1a8575935f6f557934399286fd737b57", "1478": "3bcbf0b3595c22604ba410fa3e497e829c3a786e", "1479": "984e68fdb8fec5facd8de9069fd9eed8640abe67", "1480": "b8098bd929c9971e5e5130e1605ff514dba69777", "1482": "dd91a78ad3f4b8e3e569215e9c8e540ad099d4a8", "1483": "b68c89bfb242f3709b4a8cc552b7b3b04b4f2ff8", "1484": "600fa2632973167176333cb03c8a8c3b278be4ca", "1485": "04a0bae73891767b9b113e9caffdd5510278e59d", "1486": "8a3b105e84cf1f84ca11e08a4f7264c2a7a343e1", "1487": "203b9a59d2be1622241c2e0eaa949a42dc0f99d8", "1489": "0a642753af2cd2332ac71166bcddc89b0cace9d5", "1490": "119a8be21f86c51954ce1753264f5c904fa7a09c", "1491": "ac8e2d18826ebe7666bfd3c48fd0489b6b0426ea", "1492": "7bdc530ec18997087608e324083716f85294a9df", "1493": "9bef8617251f2122cf2ef03ec34cb9f524479f6a", "1494": "da2ad792aa0c74ed11616e20d7581780fdbada31", "1496": "88945827628f833ecbcc879f098f47e61101846d", "1498": "d8d4049bdcb040e4b6ced43b2e328918c3713dcd", "1499": "dda6ebb2f69a9387d39e26e6dbaef62334bad6c4", "1500": "ebd07ddf14a68d1db42b5c5bbb0c39699c16034a", "1501": "a43d158ea71e332380f94dad2ed02f1ded870382", "1502": "4abb53b4a04a66e461a2169f585e474113781be4", "1503": "e97e2e62ed821450a4c62611dfb9abac845fc5ff", "1504": "3079783d62b733ef52761110885e0302a6a6d12b", "1505": "ecaab1baafbf7e94aeb59aab8dd7fb48b687b4a3", "1506": "02a34eb8c89f1966e41be9a5742ce09a7a6628b2", "1507": "15f168cabb3cbafbacc9d70e2b079b7ef38d0d30", "1508": "9860b31e448c5e3a1e4484fb6253dd99ac6fe321", "1509": "ce6b16cdcd9dd1cba27b2307cb7c96c7c06a4604", "1511": "b17db22b04b8d2b9133b64a96a7f62f974d9c959", "1513": "e6f95bc9c20325bde82e2d4eb1fff486572205ed", "1515": "bfd582623e9f207ec9037b1e9188f01ad5ea22a1", "1516": "375bfea0635b3ecc959e8742f3d8cee5ce71bce1", "1517": "c3b8d7e4863615f99c8a1c6b7316e680daaa4393", "1518": "4078948d1e148e1574cca5db71ef8762011278e4", "1521": "2a8fa8833087676d2680eedfd98ec236c4e7cafc", "1522": "13e0af01c54ab808d323e181d4c0b735ff8cb458", "1523": "b9a22ccdc1bf1e89be8766adfe9a8462aae158b1", "1524": "f284bb3cfd6e53b468da09efd6edc32bafd10689", "1526": "670f327d05e3de906cb4fca91b92f1ccf1944393", "1527": "aee31ba6506ff0138c7908af3d108b85130b8a8c", "1528": "15d3fba88cd7566e2981342020cca56bfa6cc37e", "1529": "c2b399a0d69baa519dab67acd715061e93986b22", "1530": "9c386b057d5210b27324ed8101c56dd7a91ade0c", "1541": "d62552c18f12efbda0f55aa66f90036400a1ddd9", "1542": "44e3f10b50f1878a7560c568e35ed5a9010f582b", "1543": "b925625941a267223daa0a32e7dda577a75662e1", "1544": "bed95a84926877f3354c423711516a4d6b23b44a", "1545": "01a5de21c8fb3f6da0f9f887f6a659b7037136a0", "1546": "146595701a20ff2190fd971db2c017579a150fd9", "1548": "adc15c64f80a4c42d1f4b86f6c366ea32b2eaf24", "1549": "0f944a19777947277b45db8e779c1566e17f9336", "1550": "032afd63041129bd1059886a76cfa9f894d2f4f3", "1554": "a256d33b919fc5deb86be0c4382dd017052053b9", "1556": "dd8b42317a224b1cc139a502b12b5da74087fb15", "1557": "17ad1f06d5efc75ca62278ca62a28a930a874f3d", "1559": "18ffe07185781a1db372db8ae8b229602037ae71", "1562": "ddd4afe487d1aee19426cd454e4412a17f1a555c", "1563": "f93dcfd088d041e299ce788cfea614ea65388e48", "1564": "f1f3aabd0ecd75086dfe7fb70be6a040958e0045", "1565": "11d06b3462573b68ad7763bed310016e02dc7e1b", "1566": "7a8158873e77cb5f1a5a3b89be4ddac89f576269", "1567": "6755ffcb816d70d3de0653507937a9fa316ac3a8", "1568": "ef2159be59194891304f89fe5be15a03214d0e7b", "1569": "a80cb3bcb5fe0294398c96e3c4fa0b32b688db48", "1570": "372603e727d245b9cfa58315c76cec70e2ddeba3", "1571": "7b119940029f2d474a50f03abac411459c1fb5e1", "1572": "648b6a00666b4f9b6a8a0ad02fb723664aec64d0", "1576": "8581ba103242da31103c82d74fa82da575e6f6a2", "1577": "8acad95ed2dea2c7671d6dc3518d4b0b12c8b682", "1579": "7ab2d909d1ad42dd0b9d550e2b4e78fd03abf863", "1580": "c67a93660b4de7163b25852cb16807283d76265c", "1581": "53bb047c3a05dc16a9af38d6bf771830d4daedcd", "1583": "587861c3deca658034c125a62bcff26ec34eeff1", "1584": "643596d5f9e519358fe785ccd081ba05edb624ee", "1585": "d81b118104b39be3a14eff4658e96fcc64036e26", "1586": "41213581b974760928ed36f05c479937dcdfea55", "1587": "844d048e0231bc0e30fb7df1766a592d39499ef2", "1588": "c0191d6beccde97d9b29d05b6228af380bbfaa12", "1589": "226043198d0dbc79bf4f0c9530946e8c0ee7fe34", "1590": "6178a5764489e05aa85b4bf47a6fecac2c89c53e", "1591": "9498b927ab0e1fd31b20ebc3b79dc41dff00fae0", "1592": "6d8b22198170939dbf2a2f21c7ecb80b371d11c0", "1593": "77a00cce6c094312f68a8999bd135b27c94b2a4f", "1594": "8d67cd3a467d1eb2262898f6f5e2cf159c27d7b0", "1595": "2f824f888819e5dc438711e11e9801c493d6bab1", "1596": "ece98a6122c604b03f58ff34f4cb1fd3b2293915", "1597": "6fb8d346880e184ab9a9a982efb6d791cee95803", "1598": "75f698cdcb63a027a4fe5032755ac2502ed5c763", "1599": "65b64a99225fe8b67835fc3d1410496e1f5aacdf", "1600": "73bf061900f4e797f58ed02037de12a2c670d2a1", "1601": "f2133da30ba40786fcd421396b92f29bd121083c", "1602": "cab37f2d77b352a269a58e02001f791799c41ac4", "1604": "b186e40cfdff60021a173b60e6c38abe7a50ceed", "1605": "4d7f6d4cfd2dc99d9bfd21bb62c5a74daa3ab256", "1606": "2a4a728562c4e543a235d60c077ff1186591db95", "1607": "167957be23ce07632fe05cba02e233678c1ae7ae", "1608": "054e7fb9feae1e9fd97c0a74b3a5a911ac6815e5", "1609": "5ff06699ce873b51f477a3666ab5d421fe8be645", "1610": "1a1edfdf234307b6a81dc815ebd7698c0182b497", "1611": "a04d7b73b3d6d2142c4b03997c124de3772f0ecf", "1612": "5ca6d40f0ab9e6fede0dd5e77a415231a394fa90", "1616": "045eb9353f234f67e5bf35272ea98aac9c05cdf2", "1617": "d8963a691958d34627e503c7a437adade4935aa8", "1618": "0582aa208fc7b05e2ccb3da7ccd65b6dc40ec9da", "1620": "c67a7c5ef0eef7ef7af35e40f291dee3f139accf", "1622": "72a3e51aeeae3465a1a3076d962aef95af689dde", "1623": "f79cb85c64476b65ef482c0dd576ef0f258171b8", "1624": "0947ee853e621f85f86653526b7303f8c24ed5f6", "1626": "b76dc57bc75349bdbcce3bb64864c0d4677a1c62", "1627": "cc96f5d2c08b03f4bd5d3d261a6871b292d9230d", "1628": "7a7ae184ff822d8a97b8ba38bcd75c50be06194a", "1629": "7c847581f8ce8b61307690c87884775eba8d034b", "1631": "02a23d401f391944bbcf5f540a68113303cf8131", "1632": "7fa29ff2e930ddbbc6121caca4c01ba570369b37", "1633": "a4ed72744eee864ce74b374931520e9dba8d3816", "1635": "cd8db0c2d3776899427fd3394713f6d7443bf068", "1636": "d590de080dddb7ed715a58d57c602d96322c4dcf", "1637": "1be66d10a63dadbfd8a0e4ceabfc8e50207d367f", "1638": "6d51921d2d6af2a7a8c1e87604c846cbda669b29", "1639": "0e36e22624ac1f0849f390a7705aa98f71e00d5d", "1640": "6dcc012f5466551a8eca47c65b6af9646f7d46ee", "1641": "cde6390a9e84df88cb1cf8bb675525737c4aaddf", "1642": "6882ec23ecee61a84d5fd796ca8361c1d537a07b", "1644": "61bf043d6b8c9cdd3038399782ade30a65345e31", "1645": "195b66856b937af9e30c7baddcca7780478a55d2", "1646": "2cfabafa2da8f22a040bf410376d753cd83effd4", "1647": "cf426c4839818667dc4cc5349d4f3c834a602877", "1648": "7e85c5df016f8aad20c7f8bea64910fae8793775", "1649": "0b7c64269fff25e02ac1091819b892f4f987e56c", "1650": "8c8a6a30828b7a8c2ed59f0a7a33a4e9ac368921", "1651": "689faeef9e4be7b8308703a3a57db0049a109e4f", "1652": "ffa67c7195df901cecc731d884ca9a0b0ed191c8", "1661": "2f7da1fdf117b37e88a2dc038a1d272ea3d4be5c", "1664": "20abddd892b7b6f8133639428a97f4f1b3e91686", "1665": "cf1e5416a1ba4b072d3719bcfa94b8dbaddfdbb4", "1666": "7c33afe3356e1ba7071ffee963453a8a5270ff3d", "1667": "c5fc6ca5b1d56fbdcb510e46e76934ee74a91581", "1674": "cc95ae255403cf1375e223bcadca03a31dd901ac", "1676": "72ca672f3e79cb4cdd589692db2d0e19d696da5c", "1677": "34962ec60a8d1085ba30ed45a86bbab9a0bda1e8", "1678": "67013f935861187c784415d4265a5b437dba5690", "1679": "a632d1f88f8c62bf50eac4024e89abbf104f6b70", "1681": "70cc1d0be6cbf590dd9c3e4e6fd6e1f2efda3432", "1682": "be10ba93380044d90c17c7d2fd5a0fc39fcf6870", "1683": "0d9d14e6669be3dd6bb3b72222dbe6a6dffe1bee", "1684": "ab2855b58cadcc769575103a9844544a69628e84", "1685": "3c740dbfcdd69ddc3ab45a42be996e5c61104342", "1686": "fea20642ac30104fe2bc4cd7b616e756f2cfac23", "1687": "bd93bdd788aef897495e8ad397eb66e7e9bde42b", "1688": "0bdc482d6f1682e103b4c4d7ee7c4d505d2d3b1c", "1689": "6550939753c76e896ef2bfd65bb9468d6ad161d7", "1690": "7da1dc80dc1c98fd6e37977b11d5678cb961f33f", "1693": "0faf4675140415e17d4112f9d0d37cfe87770b9e", "1694": "34732cbd70381e99bb7c6cbcc90ac60d6f4017aa", "1695": "81a06d6388059bebb677cb56ac565f1d79ef4c2d", "1696": "be2716f393fddd2f669f26616f80e051fc7ceee6", "1697": "58bbcc37477866d19c8b092a0e1974a4f0baa586", "1698": "c04502da7e5f4cd2edc89924876b3d0497799370", "1700": "ed2a7a4adf973660eb15b9ea674cd5fb802f2424", "1701": "9782a027568d9ad16bf2c3dea434646cec5e4898", "1702": "6224abad599f2b7fd0de28a0eacb6224f7beec5f", "1703": "406af7c8d6c973d680ab9e07d6edc13eb69481f0", "1704": "4a62bba30bc6896003f6d8c77fb9e87d7b2fb764", "1705": "aa54a0b00c01e6aae155de662ae72e565f84a9c7", "1706": "67228ef422afe44ccde7575c77e412a330859613", "1707": "cb4e7270411463c589544f5d66e772bdebe9987c", "1708": "b55b08dc8fc03aae74f375f6ef0614850073f02f", "1710": "76707bfcdebc505bbd4a02867aa863719f2337f9", "1713": "9d1a3348ce9da39d32bf062f192447a5a97ba60a", "1714": "5d84042996c4e7e3391eae7aba2bf820b1347a53", "1715": "7fcafa770549531041e0b649a9099fe0e53f40c0", "1716": "4b70725e1d13f0b3e21f6037e9797eca117b7d1b", "1717": "018515fd14cd76fb2fb9aa82316debe7dd091a99", "1721": "8d1004fdbdaa05700613c8e6287641a732acf606", "1723": "87432033ea54c411181843241dfb30af90e4bee8", "1724": "12a00b59391876f1645d18f2d7212eb727729293", "1725": "cbd4526eb6556c35d5012ac9003dbf0c53d32340", "1726": "cafd213b5f116dbf26a22feaaf05bfc05e435a6a", "1727": "035f5027fc9f1236ba70ab8f8126f370f1f2280f", "1728": "5de7f18f73910a0909853e7b22f2504ef2011f8f", "1730": "32cff0d820f0149189d434cc5880f6fa91f5fd70", "1731": "db1f929e3045c2e7d02fdf201cd5f78ff7237876", "1732": "0ae52603f526bc2efee8e6c131613758712d14fc", "1733": "5928ad33b756f898ba0ebf517f568b3ab71da01f", "1734": "62179ef66f272c606b5c6f773fdb4a17c9ec772c", "1735": "31e6a1061fffa774102335dfcfa8de9ed5ad63e6", "1741": "f2aa03f3613bebba53a42b33d7fc7f2e8d86c7fa", "1742": "cfffe4e8664539658e5353d0a76ddd622fafe8e3", "1743": "99e8507cf11c358d352d643479e9ed838a516b55", "1745": "f1de99167be9b357a5710f71b320316642121e84", "1746": "34ee054bb623db3e77722f0fb69e16d0084e1e6c", "1747": "8afe4b830c0096aebd9bbcff24e531580263a262", "1748": "62d73b7882fc58c4ef88f05bf596ece9f3cfe4fe", "1755": "ea6951ccce5ad80bcb1fe02b5548f694fbec0c27", "1757": "c5f5068121e31dca8c85b8a88dd8236412377f05", "1758": "aebdb5223fa2368750247082f544ef43da2801c6", "1759": "b7027597985a442734a57949d72e3fa0625b4d43", "1760": "be09d99fd19a9a0d110e91b78ea20b2b85dd187d", "1761": "9fd8f5808f2cd2a01812e08bf1c28ce4d55db155", "1762": "a6acfe269c4812da3898231a54bb8e66ce96e82d", "1764": "6f20abdf65515b7dd0d451259f41ccc010c1f7a4", "1765": "c4e419b7b8ed52f010ac74ff5db9e2e66adae2dc", "1766": "0f5a47177025b069e74de9d8caff17e1e6b24fec", "1767": "aac01b2a4f18c8dc0afa942ee1e6bb4718e6b288", "1768": "77adf1ec1c2986ac28206c4216f409d5aef83d78", "1769": "0b143aba145f39d4e9d8fb9ff08b72aba4b4bf51", "1770": "dd9beee3a599d3a91036cbaeef8b8499ba9cc4c1", "1771": "47b8a1ce82c7ff6d786da355edb034ffb1c21b4f", "1775": "c17dde71ae8114723a13279e36bf5532dcba328a", "1777": "e5e9634357e60925a5a70e56a1d4882d269f533a", "1778": "33d81a85e85a21fa2d18534c6f3d6e3c765ee34c", "1780": "25b1bcac19a8cd953b0db9d90ee5f9be1e0ffbc6", "1781": "dd7fc1bd54c8c34e38562eb18d1c0bcc0da53415", "1782": "6d419655bba85b3b0f2b827624788f62d7c729cd", "1783": "241a46dd5f4dce7bc7f630b58c80d15222d6bde7", "1784": "d23d9075d2932a29a1bc2b7e6c8d32408ddbb2a3", "1786": "65300cd06886285db0f293a65de1243db9dadb47", "1787": "be9d382e35a9b87565499c029056afe1ddce6f37", "1788": "3cfc31ed7c87e05e4b35dd6862e5c06045f1f889", "1789": "bb7805cb1ba4e78bc6bfc65616ea1bffa387e146", "1790": "3f00e24b041913951e7fec8a13dff280adabb6ee", "1791": "acd0ff9102bd2a788ddc6bf540ed33d39b2a91be", "1792": "2d40797b2b700d81d4db4a4cd023d563edf6431f", "1793": "edb181b34f42d34a4c5ded04a14033f7c7459c13", "1794": "e67db1dd3ee448eec23a05ffdb3ca38a2b2b709e", "1795": "b24116b4d5f46500fca688652b6ed30293eb6b63", "1796": "ee2440c53a1e3bd47736776e7c643f05c4a0db70", "1797": "7c02bafa1badade0ba9d1916652ded74bc36a1b9", "1798": "cb54844de9e501a2a54c8619a49711477c551b8f", "1799": "006ccd0692169a3af38c44bd54216319ea6fccf6", "1800": "b0c1e646a2462a3d20430ea8bc02194acca1248a", "1801": "4c750f1e72a49e47af0d78662870a73b140c3a71", "1806": "20146a575247687052fbea1aa753341763f501db", "1814": "97769988a6f19e4b76f34238c97bf159ee7626a5", "1815": "bac403104bd2af994bb0ff23056932392ac3fcfd", "1816": "e5d15f97e1393cd78036f3fc46a7c42f0963a5d9", "1817": "5440f08c1dca02f12ea4a4479e6d3ea91cef5a66", "1818": "605efa618e7994681f57b11d04d417f353ef8d50", "1819": "240c31dccaed8fa3a6bde6d6c93f5eaae110770c", "1820": "0c1a2129df64cf45bf1ff49c8ed92c510fdb1c82", "1821": "49f47b1ed66583d4b90d3c06faf3e1d457cf4df8", "1822": "2809f7c12384e2615390bcb76f2e7f0d88a3fffa", "1823": "95d71b2bde0ceb40cb1b64fa762b3009a94168dd", "1824": "7b83e3b26674ff764c412864f886fcb34206bc29", "1825": "c5f623f12ed094c2f40bf1173daa58b4b6f2cae4", "1826": "6d05c31a24da9776723a179c74b70338b9302a82", "1827": "f41432c1c746c6a6186c376594c6c7f7dd24cdb5", "1828": "81cb913b16d4368915f7c3ee2d66d8eba4e750d3", "1829": "39ba9bf252376ec7ca802d29abe234d0c53014a0", "1830": "bc4f1088744af7f83192262a97b9288713041cdc", "1831": "1abb2ea37a21b094688ef666d76ddec0d6fd9eb2", "1833": "13f8793ab96f11f88faec54e37a215ae461eac58", "1834": "6a9c831004ad896a8429d97efdf2133a39801bda", "1835": "c46fb05221958e6100feea597a8aec02aa184775", "1836": "45b65d99531d6c81fb787598caa4116c3bf11d9e", "1837": "4564d9e8f591c268ca6f38ab8c6498dc665f241e", "1839": "54d66682311a155c7690c30a8beed2f8782018f7", "1840": "cd4de0a7c0030487280772e07b7d59a4af2668c1", "1841": "5825856a4ee19ff0dd5d1beaf6090bf601d0b411", "1842": "b886e534027949ca1a9b4d23cde886d4a6245757", "1843": "c274a0df97cd83f68a8a2da7e7a7b29c5ba50750", "1844": "22f8bbf795b484b5e825bc06796ef25a3eaa3695", "1845": "e3723a63ad06eba96e1ed1e88c1821df5a762cee", "1846": "f83e98bde759a74330a20c89437ce347e8a703ed", "1847": "685f1b4eb60c3dd6c9127bee93b6c138f890f700", "1848": "0ab04e104a60419c464fc1833a13f7f2b92e7983", "1849": "d7cb148dea529453cef60712186d3ce8600a050a", "1850": "8adf28f62c09d49ebb677cf14ad54a3361329b22", "1851": "e073c4f71575cc837b60de4e463d9717633170ca", "1852": "830e8dcea0f05118e4a2b66d66ed42dce9b84d5a", "1853": "129cad203ea30ec7f5e4c6a166200af5d4c1a1b4", "1861": "d7eb019b26fb8eb1fced527763e01582550d72c7", "1862": "270fd697a82d051f0ab2c54b70b74296699bdcf2", "1863": "cf0eb393daa41abdd8cdf32b52ceee938cdcbe1a", "1864": "c736defeae77e963e5421b1c60d6d020d53a8220", "1866": "0f70e828ed127229f7160075d2ad06a6b16b1002", "1870": "a58f28f9c65b84ac7cac2323443c8671f4911958", "1871": "957b72db2354a64872fc2b5bf55d03daed4bcc9e", "1876": "247f2757d787569e395c95de7bb09869da1a2e28", "1877": "e37a2d3d0d3b94c0600a53daa1323d05b5ede83e", "1878": "60518ca737bf13cc37c8f1269985dcbb68dad4c7", "1880": "14eacabc786d493998e22fc2b1212d76e7d37d80", "1881": "349aa36cdf33f57eb2f42f459eeab9b26c2425bb", "1882": "49fc2cf3733f20ac6cf8a7c61e42ef7aa5cf4b03", "1884": "958c26a13e592c5af0d7705406a51ec662a5f191", "1885": "da6c9eb50f244f70f5e9be788d367103f567a6e5", "1886": "312c443d88f5b548ee033f223b4c2363701c4cdb", "1887": "3d4404e9d9a9b2a3327f8aee664a8e71ac1f18b8", "1889": "aabedd1586a56cc90f5017fec0697df56dbd2ae7", "1891": "eb20cbc53d5dbc3daf849dcebd1ff99870b82016", "1892": "cca9468648521e9317de1cb69cf8e6b1d5292d21", "1893": "c1d5dbd71efb8fb5806fad41959794182780fc25", "1894": "57e29bc5d82348006c5170ef9ac0a9eedcd9acf9", "1895": "dcee13d57ebf9a006460deedb734c15791acae7a", "1896": "b22b93df20ad25ae7a11f0c89d32fb2f234d4641", "1898": "94282dee33bb4eae14049930237f4f80e9c57f43", "1899": "a68f9e944a93c0092c39fb72d3aa9182df1405b5", "1900": "bd3f3719c46a0f133e0abd8a9be4a4f7adab3724", "1901": "867905270344b1fbd366f04e6a0042d29d10aeb3", "1902": "5d5f2a4fcb51a0626066569eb072d16965d28579", "1903": "efdfbac86dbe7a1b9028e3877e9f2bc7502b58cf", "1904": "0477c688972bee89250d75835ff543db27f2e0d5", "1905": "e00436c13359272fa156238d2800d64a58161adc", "1906": "ba2b6ea47d81575e41af6c92ba4c2c3f8bcf54e2", "1907": "d5ff94ea75b73e8b928bda1ec6b0363d5125207a", "1908": "d231df0fb13918b40827aa5fd61ac5516e7e9dac", "1909": "7df6cb33e94534a6555fc08d730e55c130fa2c93", "1910": "4ec7f6347903f9133c65ebc5b6e0e15553b98577", "1912": "efdc97c7a756dfea80f5ed1502d409b5cd4fae23", "1913": "8f35ab57996d18f2c1f001d624682952853454cd", "1914": "dbc78a98c193a92035c3a2cfa63760a88f0739e8", "1915": "81648e711f7525d87dbc58f53e67a2fd22650ae7", "1916": "c36051539621496b543154b212ac3053e2d42286", "1917": "8efd8f765fffcd7166a78471620a942174ee8086", "1918": "fde216da6ffcc72e2815e776e796f9aafac42ef5", "1920": "53ca4f324b1ec55d6069b1bda6e46568e1b55699", "1924": "099730713e702de1db57ede5171a1c6cf9b88735", "1925": "af7f4ed8ff0033a9a4e7d35a948f2057033bd826", "1926": "2de5c67d7c4a95ab2aac3530484367b1ed1eca94", "1927": "86d361078fbad03143bf02ce212ffa8af4d416b5", "1928": "4ee284c11796a3f48a3113f406c1554677bb2efd", "1929": "3982306a540bd09b43a21dcdca6b16b4741ed151", "1930": "85c1ae5cb4650a67304a33ebff465fd7e9ba28dc", "1931": "a76e2a17a1c0168cffa97f08d164e48025817f05", "1932": "82746b9acbccf984be6d1499017ebf8f049eaa7a", "1933": "910bf2dd893f52072c2c25413bf0866825f8309d", "1934": "ce1d93a3ae397b4951ee81b9c971b2c9a72e30df", "1935": "35ae83481aed58c8a8abfc97b900c494a5d47f21", "1936": "9b33451648a3192e93c46ac6961627ed2858c7fd", "1937": "71815691339ea5a61be4c2f3e448fd51ea97b77e", "1938": "05933a5f27fb96f5a7ff6025ae2573d033a31b11", "1939": "06ec64bedc2ace639af09759053182472fdd6544", "1940": "eddfda4b521366c628596dcb5c21775c7f50eec1", "1941": "35782883efd7e22f8e29a7c9887a4453adabf783", "2049": "138a95401473cd96d5d7456d897b9d087bc45b93", "2065": "bab28ca3c3ef4cb6f135eb0e42b73cb57ed2aad5", "2069": "f727c045729b969de0e4a876e14209cde77166b9", "2071": "e3e5e4fc7d7c74978745d9da0e3dffb08c1d0129", "2072": "7c260ad55d40bd31de27a21c66f47202e430b66e", "2073": "a25a4ce122f2aac3be9f92c60fa5a61ff12f9201", "2074": "c10f0f9902b3d4e66135e83773b7ff2aa3b4215d", "2076": "45879a6c42506deed2342de7f3dbf0ff2b223d1a", "2077": "39ae12fa74ffb5d242cfbf9d1bfa83a8dc9f71a5", "2078": "d071b4386a41d2dbb31c3e34383bd0d582864187", "2080": "0794846693d9700030316cb1bc4a052a8a4eda2d", "2081": "d6d503ac7c3028d871c34d9e99e925ddb0746df6", "2083": "fb4ed0da312894a29cf9bf4641be57cbd16ccce2", "2084": "e5b1888cd932909e49194d58035da34b210b91c4", "2085": "b5f7ed33150f74431bf64525c5c901b7c7bc64cc", "2087": "90c57ffb4653a4274e67ce75f2f6c7a73edbbdb6", "2088": "0a2c0de4451f7e2e8f337a9478d7595473aa348e", "2089": "ff3425d36c7622065e86e6b749a883c5a06f2503", "2090": "1b8adb661abf8474cd7affe78c1ed7315c89279c", "2091": "5b5d7f4114149ccd4504ed204a8ca4ada7f06a52", "2092": "027f92a7655ae5b473839b7956ff52bf7879f3cc", "2093": "d86dda5094eba47840f42a21cf4b2c953e698960", "2094": "d50269468c30c422cfaa388578cbe4fda4a09fd6", "2095": "446148dbf9b66debd0a0dbf9ce778253380d5921", "2096": "c89f8ba6aaa575ed44f381ad838c8e39050bc102", "2097": "3c82487624b753c0f5c2bd66da34475668a0c807", "2098": "2ab0ba5f5325bde53ce64893f14d1f7d0e5e2171", "2099": "12c3f147d04aefeee6e056306c0dc5dc7fdceb59", "2101": "2d21561508d351c79dab9e0f62136065ceed2e4a", "2102": "16d3528b4c435c58f6fbeab16a6783bfaffedcfa", "2103": "3ee4fa02ee69272aebf4fea005fe77268b166fbc", "2104": "238a42875ce585de63932c8beefccb31f0d28cd6", "2105": "6254347a00dac881e85ec2805c609abc1cfd0ff1", "2106": "6477f19452fe6371e4801b7f9f0d857af4d09351", "2108": "94ca77104ed296e51ddb1cc6b8880fe29babc11c", "2109": "02f1927f1e0108bb83946ded3889f6163317bf1f", "2110": "7871c7bc5adeeaca9b6fc4b88482be8b18333faa", "2111": "621bc10e16c21ca4270a4c2a25aa05f814f2686b", "2112": "d7cab029dce44cf22dc965c4552ca99631f879b6", "2113": "0215a133ac32969ca0a4126f6aef82be099ae8ef", "2114": "6be7b510fec5791fd025d1eaaf1cfdacb6cc35cd", "2115": "4bcce6ef12c0c80d6df15ef4a4b2b3a85713c106", "2116": "00a0fb98daf617f3f52a2c6e97e735c1b266002c", "2117": "9013f54283eb6776920ee3bf527e208a516d086d", "2118": "d0054290ec8305d01b040e740e3f4524815ea77e", "2119": "abcf1e999d5de710b3e6950c86d026d2cd368351", "2124": "98a9694694584f50d03f6e27b516eb10d18d36ef", "2125": "88f7b27d32b099c508e93251cafe503f2908d426", "2126": "c070b651fd8fe2b8987a45a163d53e8b43a4cc51", "2127": "f241ee0401a82df45afd7abfaef384093399364f", "2129": "3afffdf5d75e76c091f44fb68bf7e1451fd23851", "2130": "6440684f3fd3eea477f83dcf77f8d66103b9df95", "2141": "3f01114dd9c8b09376ea77bae2f11d9abef99490", "2147": "f492ba9888fc05ff7c224db8a22faac8c0106a4b", "2148": "6f0ff798a23126a951b509ad3fea07e3d8c6b3db", "2149": "a93399c43f103f518347fee02138a82504190e18", "2150": "ee6c6ae752f0890e966777f4d0f5a688db8d0f38", "2151": "ab385279c4bd143cb787712a583bf9f8bb51128e", "2152": "fa8f74db4260933a31b663ef83283baed4977a49", "2154": "3a9c48bacc23dd2e86565a48cd35ec79cd9c0c7d", "2155": "c30ab4c132295b1e168fbb06a050c76554759e11", "2156": "54c41ab0caeea1a164dc919474bf40b8d1653089", "2157": "3eed27d73f53d3818e67b4e07d9d2415326510fe", "2158": "77530c87dcbc4ffa5b2216c6e9129c1fabcf4b3a", "2159": "d2ae95f03e201bea81c0e5e28146d5d12b1aa7ef", "2160": "e50cec12655b4a2a3decf342ab45433080d3c023", "2161": "573c716073b61360d0798104802311c90a02330c", "2162": "269ce44f8d87d44a17b34d4b929ab73ebc7c1fcf", "2163": "808b54ec79e47a6d9a1bbff8db943d2ae47b17e6", "2165": "daf68bb97b9ee58099137477afdf06ad1d4c75a4", "2166": "d80a458f41792aca9066fcc37cd60b85d49f98fb", "2167": "63cb3a04aaa899c0b0b1990f8ba7019340cefa55", "2168": "ae6901cf0371427a243145da2da8ca1c01f95874", "2169": "fd776a5a4faf7695d461f369bb2470dcb8aa2745", "2170": "3d90bc83be20d9ab60ba0878543fdccde8ca6749", "2171": "c51ab405efec920dbb4baa2e2389409df04e8d43", "2172": "7af1b9d2569fb74e4b934dfb0ceafad7be565ea1", "2175": "073dffc31a628978e4dd09b40a6a0ac648f20426", "2176": "e639418584d45d571126ceba29847e278bec943b", "2177": "7b1ae5a17c81b248b40359bc95acd41d778cce6a", "2178": "a0e5a650b54cc14451dddc8edaf40731ecc212e9", "2179": "317bd75d0677c0ae1a400f7313953ee6638185ac", "2180": "6d5545f4a132f0efce02db66a6f5d515d4000812", "2181": "8f6e642d8738d627c48eea3937b1baefab9de991", "2193": "7f801adce1b204469bdf95fae82b110d6cf59299", "2194": "9534478597c74a70943cba6fdde5f78f48a8fce9", "2195": "a7b6066f68ca47f23d8ee523cabed1a630214f71", "2196": "b103735f05bc5cda2b19bf84f404e95b0bb894d5", "2197": "193505fdf0c984743397ba3df56262f30aee13a8", "2198": "0ae46991cdd0c3389aaa02ca59bbb471b52847e9", "2199": "7c009c747caa90554607e30b9ac2bd1b190b8c7d", "2200": "e05923887697ad2daf8ec82974819c5b88213337", "2202": "dbf188c0478c72ba3e8f2ca7d390d1fe02f22d34", "2205": "68b1f86b00e2492107168c1ad2f56d6277edce76", "2206": "b998925d9e34bdb5c0752abb85a7a5769e0826f1", "2210": "1cd973c7b2b3db260fa8e6c5ccee40fa0bceb6ff", "2215": "4610ffe95cc1a1353aab9f09cff7d489dac802ae", "2217": "a884c35346c0b565b783e576f43c61dbb6090c06", "2224": "cfcf1507e8262cdb9676a7ac30e79f97e506c054", "2225": "e4c5a47563714068ebd4a0c026daa6ebc8c49c07", "2230": "261e29606d3ff18b71396c3e2abc640f0634c5eb", "2231": "a77a6464c83ad9e3d91fdf9650aa5e43764f6aa9", "2232": "f2eebb5b00bd39bd4333183c6a2a4b81855a2ed7", "2249": "53c8187ee63ede5b523da0a1d40adc36498a7664", "2263": "ba7ab8eb80dd6412f275ffff806db37ff7ebdb01", "2266": "4114183f84d3d152126510655db5698fd4ea1071", "2267": "8b5452d5ffbb3f0af3d773ce4aa3ee78505b84e0", "2273": "252665e5317b3072f89c3477c36001986f019d22", "2283": "ff477202978de7649b40559469e18338763d4efc", "2284": "c196901876e473944b10084a126edc5d6f4ab3a1", "2285": "e4ef652ead6e3fd4bf97deff992fb9065eab4b44", "2286": "3b97d7dbbb9063165135451819f060b742c05ac4", "2289": "882433c46ea59df9850b11b4c6088467a95a1a8f", "2290": "f7923e87684c1b1b197f0b9688488eb14f7c97ea", "2292": "e00b5169f9127b7823982d6b06c57829c9e7e40d", "2294": "8fbe04ff64a1c1658d9ed8317dd64a48b8e61ee0", "2295": "2b4a60bd5d3de94a03df2f58ffd097b56bf654ad", "2296": "68470979ace8bb5cd9622dd0efe4b1e6211dc9cf", "2297": "5487ca7a6f8cde53e25517e8c8bb19dcfa0cf3a0", "2299": "8b40350f77662ee9edd0837adec8a7388257577b", "2300": "f218d91908788f8a429523c9719b989d931831f8", "2301": "4351b8b5b7cab8e3ff9b0f291df9f78d09d4f295", "2303": "cd4b1416da062a29a622956801fc89ba35182797", "2314": "56447387fe536fdba0166d413e91e22708ea817d", "2315": "d3948666bf211c296f3a5640f23a9471cd4f54f0", "2339": "b8bfd7198f5f8b324065760cc44b4c40e35ad795", "2340": "9068fbcfd7d4c169018ae706d6c96edea6db0cd1", "2341": "e4b3ccdefc361e0d59fcbdb9194bd95591ec451e", "2344": "5d1fe8b1bb789e30292bb39da45f99f71f48bfc6", "2345": "91d6825c93ea58d790352229d798ff7cbecf50dd", "2347": "672077fa743df4c0bc7a636365a33b556ffd1a3c", "2348": "3e3bb8c93918a8dcff6ae2b1a4835586f55d8233", "2349": "4fbcb3ddaf94bac5f883d9e8a4f6776343057a14", "2352": "d9184e6179a37c9d642269dd2841f25037c4881e", "2354": "21ab814e2f9fd9e4874a036e2fa8e53208638614", "2355": "a4504a0e298f6036dc9925bdee9a6898f4d64140", "2356": "209a03c04215e9fc79359aa47fc41b8986676bc2", "2359": "5f84f9bc7fbdc4fb845c9642b00fad2a874b18a2", "2360": "0bd1351d9f5a5181bbf3e0a5bad88626475ab18f", "2362": "75c82c88ac538fdd4235d0d6f1cea323cd6bbb3a", "2366": "90cdd49750a1da45a31c4701a754cbf5e1a84e95", "2367": "4c0f9d3e3c3da8686a3c273d633af692c421f03c", "2368": "8e6cbfc4664d9b118d730de6578b73019bd65b1c", "2369": "7a5433a83b0f50c566bf7c2dccc4c622076e6d75", "2371": "7c1cb3c96aa1a9123fa9edb544a1cdcbe34a41f2", "2372": "069a36cff458db3840f770a88998c77bce401d10", "2376": "dd545fc120605dbdb8b2bb47f16aed23139f387d", "2377": "f4ed1c803c1d0139c5f731f6d723252025645134", "2379": "8df0030e1c1cdde73591fefe1d2fd7a164312b3a", "2381": "d724802391524ad21847722d3d92f8448233f500", "2383": "4db3e702b959ad3f494e8299c3fc1258ab294112", "2386": "6afee33df4871578e0056dde614878b4870f8d2a", "2389": "e57ad2599fdd6db00742426e202b7a678f05d2bd", "2390": "bd45eac2fdfb694f8cc69b7b943fa8142e90499c", "2394": "272df05f285815b2c122c1787268e972795061d1", "2395": "a2ef47cfcab138bff131eb8378c5f670fc91574b", "2397": "177d9f570bc0bc7f55871ddffd9aa6d71c2b5ea0", "2401": "169fce28655b203a4f6c19ae512bdd509348f041", "2403": "fb0c5c1c90015a2131185152ba083908a0b51671", "2409": "8d3db2b4a7fa79716796b33f7cb3673ed729b652", "2410": "e2fd6ddce0943d42d802180d5359733ad2272ac4", "2412": "8c7d8ad74ab9ed6cc1b60f64b802add48df2c6f5", "2413": "03e2c55be478e0eaea61452141c8c814556c70ba", "2414": "cc3ae2a1585205ab2224cd6202c0ee417505a26a", "2424": "d9bca95ac157e71ee5eb5d6cd3691aa99968c511", "2433": "2dcc26fc2f9e3181a65d351c4a9b964883a6c15a", "2437": "2fdaf8c2b4603f4fdb74a85365592e7817cf5bc9", "2441": "da50568af9d024604b03d25a5f456fbd9c9af302", "2442": "8abc2c64fa90f4ceef94a917c5e298ef2630ce89", "2445": "3a19ac8a0bea061e1fb0c4cc774c457a6ea8379b", "2448": "40df200c67ef93dbbe86a3b15ab01926ff7e3faf", "2455": "55ec62164ada7174d3d37f678639068da454d512", "2461": "e92847c03fa0d0c5cc010f8b66a2356573568a1f", "2471": "86bf1e8d30bf7d279d3b78a6ca06cb6499575ec5", "2473": "aae34e724f0c471b5079339eb28d187fed9d35e5", "2477": "16d938099257a6317b72b53762d687a651531cd9", "2481": "f4bcefedc1195202165a72ba2d59629b14e41b92", "2483": "7195480c9aefa03370a5ff765535bead9c89ad40", "2488": "7f12953470b29c1fc3b54ded7c00a420e89462b0", "2493": "e1d639fed377a6eab01db8bfe0b768b2435bc753", "2495": "daec667517e25d38fe9f8787c33dd63c6f50181c", "2501": "c2b8d8e20b37a6ea6d3111112181984e51f3208b", "2506": "6b02d6d06a3380f79b426e50d1112c6743575521", "2507": "87c3c5c7f9547c7fb53a9c1374e36ab318528bc6", "2510": "eba8b2e9468ffac24bab3410512973804e82a9b3", "2513": "bbc76972c20cf14e8a5f985bc0a05e59685f8376", "2515": "ab90115e5493b36a173539cfa2bbc68086dbfb52", "2517": "0b31fe2c9e670be4638e305f96c91f17e1e08e6b", "2518": "baa860554febd58b7aa11947028c367664488887", "2519": "7f76c56d6ded9159f1d7bfb50964a3532f60a8f3", "2528": "1fb9eb8d521afb57cf911f2bc3514f26727d9721", "2529": "0276f1d0474928f73cb0351eeecf0a1b46cdb131", "2532": "e1e5ecfa1dc0de045cbfeaaa83ba51b2e484e82d", "2535": "afa442b8c0389d81df1d85ce8ca3d88c8e3250fe", "2539": "02215b4abbf682773b22fa5881b7f63017b96621", "2541": "8817093cb2f16be3709513b1517d8a4bc679900c", "2545": "1f321c7858da4786ee1fe71addeb6462cff7a998", "2549": "ee82897403cf92e091327da173a3b368f94ef112", "2550": "26ce87547e327ad129ca1d75dc9102bf9d5cb77c", "2551": "632d724adb013d6f4d18aa2a4f2faa9325d324e8", "2561": "f4e96758402d757eedfb515425464eca5af25878", "2563": "53a04b81c22a7e4d241eead8d7068ec651bac37b", "2568": "adeb57e9714a03bbd852e84f998322e6db152800", "2600": "e8e57d96edf1c2ca874c685def859d0b1ca603da", "2604": "d14abf463548dff147a12cd59727cbf0dbee7721", "2605": "6901db38694eddab51c873bc9b66f03556e5301b", "2607": "46cb44bd0cc7cb599bc5cf4edea3cd13f10a35a2", "2614": "9869832dbff51bf766936dadc38f8302bea47e81", "2619": "eeb410c87aa657d556d3cf2403195bdc76cc7193", "2622": "6bc1d1dfaf5009aeff7a8bd926a59ac4fb7ace6a", "2625": "f617c5e6621f051d9c7befc297deec79563115db", "2627": "e987314820f4483ca00a5a2e19fdd88060e4a743", "2630": "ac6f5eec87aec6d648ff56e1449fca65a78db301", "2633": "fdb79c612213656c3f1d050c6be113d2072fcc05", "2634": "f449b4c8a7e44315f3d1d4caa84834cb30cefb83", "2635": "c9f7f6506a5b7503bcd9ec9b9a08d6a008747a52", "2638": "e1d42410c3900f93be420303e745de29c1e6bda1", "2639": "2a0717b74e2c4de6355ccaeac49243f1d0f86a6a", "2642": "be98fe6cca629471392bf7de11f258a15fc47283", "2651": "6fd39cb5bf8c5c3801ef152a1812a5a5c34957dd", "2671": "d69bcaddebcd6a3d601e5023889a175dabc515b0", "2679": "6a5416c7cbe230bcd3fb359165f1eee535d35658", "2691": "d6a6cf380e29ad236d1d8e2004f124bf586069dd", "2695": "457c926aa41708a89c882e889896b748578cddf8", "2707": "9c332a3fff7da804d1e920db09941a3d70a51628", "2714": "5240febacfcf56a94619862f5b3917cf13f06749", "2724": "0cdcf1c73fe68947f0166c1e1f91623982054a0c", "2727": "58f850d20bbb3aba5fc592bff4003ebfdc81b68a", "2729": "3b3bba9a83b6bec35e86826800004987afe24d47", "2736": "29d9da056a4e4766314c4ae9ea62b33e0d52e662", "2770": "b5545c686751f4eed6913f1785f9c68f41f4e51d", "2771": "54fd6c1aeba0837a0389c78fa7d53b22d8c7d7f4", "2774": "29025b3fe62c69e27b337a8e0177022486b6cb55", "2775": "a9869a77c523f38b38769835afe9a777f7341655", "2776": "da385c96079806dcc9d6e6562db8a9220525824d", "2777": "2e6f4c6c32e58314dede1b21ed3c4dfa89b48ee9", "2780": "38110bb65643babc748e9ed59f6e7780d80c539e", "2782": "e0cb0f75c2cbbda471f5fd818bd9e69e1e5b6ff5", "2787": "8e0e3cff712ed7ad378d95bc957577ac45191f2b", "2789": "37ab771ebc02e1a6ac2057cdc9c1f270d0efc02f", "2793": "98fbf752fc406a0c085927910184048472cbc4c2", "2794": "398da0c1f303815b51995b1a2a6f09dcd96156ad", "2796": "67c9c2c2ac7ecd9c07c7c001c0b0bbc2878705d1", "2797": "f4abfc861dbf64e8604a140265aa890db37c6c21", "2798": "0e426677ca39458d61e57c9f2ca23ad5c0789f6e", "2799": "def4722549bd646e02ea9d077fbac116cc481f70", "2802": "9886c0124b2003e381619fd684c3e68604faf16e", "2803": "abe20a57b82ae366b2394171d1a7dd50ca1b9cb9", "2806": "0e9cfdb2576408e59ccba7e87bbba0e31f14cd75", "2807": "28809907a064c9e414473e76f3aacbd5fd527d6b", "2812": "4fb08a90496f95aa5be3ddbf67f5a49f2b3fa502", "2814": "e5102f50b6a5a2568148799199880523a129c634", "2817": "23ebe6b35ec36dece4a99d23d41070dbf99206a2", "2820": "513166faea5926101ad14ecc149b6c72d3376866", "2821": "ea8088af4cadfb76294e458e5095f262ca85fea9", "2825": "be0eab987fa185610dce3542d8f7b1281276dbe8", "2827": "22ce95e78b4db2f21d5940cbd8ee656e7e565d15", "2832": "4c01f6464a1fb7a201a4e748c7420e5cb41d16ce", "2839": "77b8d367962766ad5cfe45a2a0981827a6508214", "2842": "762a00f68c9fc8c65cbec9b5bf5938831524ecd1", "2846": "b608ea056ef164da4730a5db5b0ac9a82e6e803c", "2847": "c60087eec949b5f8a138ac2a58b06522799753e6", "2848": "b0ef411df7dec628d4d9fc035f60c9e74895518f", "2849": "ce54013f2116fcc57e7a6a09cfdd3532beb24d45", "2852": "f14b0fe6db4755903cd52ddd3b51e4aff172c359", "2854": "21518c44a343adb94be0cfcd8ccfec8da32db836", "2855": "c400b96f7361b11428f31ada097ba24ea15d33e3", "2856": "61881ce71251b6c2a0c688b67fde0a293dfe6e19", "2857": "112afb6fb455beec67c9ded6f42ffbf378bbbf79", "2858": "d142c845969b3f46a0e6cd40933d80ac4c3ac55b", "2859": "19615af5d40019655347a7e0b14be84f54bec842", "2860": "e558d9de571a5b2582f59b5dff023c6b51f058cc", "2862": "e12b21703494dcbb8f7aa951b40ebe1d033307ba", "2863": "763bf8ac0f452f387e0a8a4c61d94b79d7480b93", "2897": "521eb6034c7d0b4abf4f3ad84acf330612038358", "2898": "6157b966b7f332f00bb40d6dedbf5f39b7343451", "2899": "7a9415e10895ef094f76b125812ef1bd5bf5640c", "2902": "0c68d9fc1d239c2f8257414c68c5b4a152a6064f", "2910": "bb94bbeedc452f63d3c678a63027cecb233faf3e", "2914": "8a332c1597c54d36f7ccbbd544e186b689f9ceb1", "2915": "41ecc925c9f7b11e385a16f6b664fa2b15b34edd", "2916": "7de7b92834c5e96cc4c74f1d1563a60a467ec4f8", "2919": "0c3746baeecf2ff3a0f5f7a049dcb22d3e6eab43", "2920": "aaaeabbe44fd64c0bb1977f62a97972de55f360e", "2923": "b99cf06a0d3bf27cb5d2d03d52a285cc91cfb6f6", "2927": "bee2c28a3cededa4c5c4b61e9e59c77401ae39a8", "2930": "46b7e66b81711f67c7e29a339c28b21221d97007", "2931": "97d88b210954d1e8e9406401a9769349bdc5d8ec", "2933": "8ba32a88bd623ae9688b9ea84354864f7f3ae715", "2939": "b8323b5f46e25d257c08f55745c018197f7530f5", "2940": "58a74fd500857180f56e8116962ae203fc90feac", "2943": "ebc718d0f4bae70c668169dbce5eb3f35606cd38", "2944": "76d741bec279305b041ba5689947438884893dad", "2946": "2fee14409bfda6661b8fcccbb33f3c93ae17204f", "2947": "1bd39dcc618298060ff265f7a6492d14c27fc5f5", "2950": "b8202f127d79b20076126edce85dd63a59e4a677", "2952": "275e32b43dbe64cbe8eef51034ce268194ef5e54", "2954": "684395454a7de655357732c7dadd50470482f4af", "2955": "a4052173b783628d0de1dd37b185a9f3ad066fde", "2956": "4b090f22a8ada099641599b3bf4d49fb6adfe10f", "2961": "c3a4f781eee5fe83b3747f3145080a06dea17599", "2962": "68fbdb1675f20c70a77c0cb608534e9995174680", "2964": "324099d8737ead092e4acacfe03b1caa82e01986", "2968": "1859a37d6b90a18410124b21e25e5c2d59b7217b", "2970": "47a9a4a294c75cd7b67f0fd7f95f846ed53fbafa", "2971": "992eff5fe8ec7a3f9f0cd6b0bc462f3af7b4229b", "2972": "7ef544f4467ddea18cfbb51ad2a6fcbbb12c0db3", "2975": "abf5a7c1631250e5092caf96968077836f7ace8b", "2977": "31f8bd0e699b7b56014ac37b67f282687c8d6b43", "2980": "45ad9deced24fa0e5c8e119b15fcec8bb95dbd8d", "2981": "f6b31d62e555033f383416da20b7241fec96a81e", "2982": "43134efbee3b384db4344eb3c16bf21068a67fd2", "2984": "602f8664e480def8edac7ad45aa9d68e1b3ad7c8", "2985": "4f91d24230b4f05b6b7a3ba0796e6ecfaef6ccf4", "2986": "097ea527c8e3f099e1f252b067a1d5eb055ad0b5", "2993": "c20788098d5e14694fc4ce61c529cfdc2d60c936", "2996": "23ee584198dd961e0e0cddf83df7adfb7ddca17f", "2998": "13762a18c1e35d1254ebe1db02c170c68aa05bb5", "3002": "fe19363d58dfd50834971ee56e5038a822374594", "3004": "46dc0a5a8bb90ac73c91649a3a29702a4160e8cb", "3007": "c130e13f805911b6f00871c4783e0b9da72a8a41", "3009": "7c4a6650f3c6f7911b9373b84c809b4b784f847f", "3012": "abbbd03023f55d4ee9592c4c695308e10a97cb4c", "3015": "807298d7e154b47ae922638660d4c4cb6490a76c", "3021": "3f81d69a51ff2b758b8391bb080e00f565935c85", "3025": "fb3e90d33e062278db8212539ac52e8fdd58522c", "3026": "c555f590ce22db2349dcc2faab41e81973ebabb2", "3027": "25d143ff3c6043104bda3c51a204eab626103eb4", "3030": "d54dcfd8e4cceecdbf818a48bbc712854dda906e", "3033": "d020aacd5cfdf9d7938d70bd65ab8286ca5bc8cb", "3038": "4704751c4440574ce59b9948e88e6991e1d3183b", "3039": "c422c784f14d984cccc5b51c2c5679befa2693f3", "3043": "ca42a1928e3ee68650eec5c3a8799356636bb782", "3045": "e36749008fdf277d08f01c5dc675edb1b8d62512", "3046": "a1d5dd4778ce517429974ed1d31dfc2984301b70", "3047": "271d98b260f03b345ae2384001f2df83b98322bf", "3048": "f601f8a9d602c70333548df3ef5e3c953df04f37", "3050": "9adaf3396cd88b1cc1ab25a72d4373d874cc6069", "3053": "a96639529a2e121f24b8c5462e1e76c243b85ede", "3055": "cd3d0c6b2c0023242365d87ba5a717f600dbb8bd", "3060": "338c5015e6b06705f3c831a7ec77afb202546d6e", "3064": "bc2596214d09b05f213d7cd99b3d913a6b48fdf8", "3065": "14452a8414bdec10e3b5cfa05e98bd26c6e1bafc", "3066": "b1501d8dd838d36842d7eeccd07a2fad9073daf1", "3067": "fe3a229df446172b98ed88e6993503d944695c81", "3075": "2714aa4088719dc2fed9d5777f3a4e65fccd6419", "3084": "871099460b87ce94acda4db04cdd4ca235c2c710", "3089": "cbb3b5da2cff8db2ff41715f1e98ae61d632eba1", "3090": "21db3be5decd5822f39e57e25895691828935768", "3091": "1de52f299e40225ad7e9470e16a4eb8399e1004c", "3094": "7c835a2761ede41d402c1febd29826c1d0b9512f", "3096": "1cbcdc28d2e32aaeab86ab9512bd132af2e5b377", "3098": "2b958e99d4e5d61d7f7736fee59121f2484b868b", "3101": "4380eb74064aad116f58e71971304ed731428fc3", "3102": "4c1e4484cf6ba9d8a2a3978f3f81654d088ada18", "3104": "553eb5cf5f3bb255999720ab9539ffc4964677f1", "3105": "3bf5d8ff4311a3f7d68c721fbae422dd0849f13e", "3107": "9afc04933a32c0a4d70f57488f61ed7a78e017f0", "3109": "fa6e02a9f04d90da40a93f2d925024ade52c8bf4", "3112": "0dfd88da8e2bb6abdd40e7e988752ca3c50fbb8c", "3114": "a6a839935ad5c785d74a0b36c43272473cc4ab6b", "3118": "4ad1807fbba215ad9e0e65943a41524d7698c4c4", "3120": "eac21a8463d7152b3ad48a8b80d6da5ac645be6a", "3131": "caed912abd45ac37de200c2cb83ce975a6d55118", "3132": "456068ab6d19ca0790bf41c8131ad98a3996964a", "3138": "6d64e08fc8e124b7a6ba2aecd4062dfe7fef90f1", "3143": "615f975ca2038c7fc166d7ddf3d5c45bc362df37", "3147": "e9dbcc127913db77473a83936e8b6bb94ef84f0d", "3150": "3abd961fc746236f75463304803f09241cc3b019", "3152": "bbb136d05fa280bdb9c1a0dba56ec74a03019c27", "3154": "199e3fd3cfa4f03fae107f213dfb68781562bc93", "3157": "f62f880c77198a9a198f84118114e123b4f1bdbe", "3158": "5b96219df4d45da7c9c905be0eade2fd05ca4a66", "3159": "c48bb30480f139f08d720171c6107dc74183edb6", "3162": "db1bddcf49c3ffe0452ef83d16bad861257d4b45", "3164": "3bdbbcb3277a7c918bc037ca9b4106edb68ec815", "3165": "f8bf5b43f98c4b22eabdd2ae3397f7f889d033f8", "3167": "06699a892c2a020c92ecf0c54d1aa35bbcd5660b", "3168": "599da507a8fc8d7b978166775d6dacb6581b80e9", "3174": "9992b12615c3e01ca1a641f05bf0ea2c162f9a9f", "3182": "51b0a783e78ba94866924bc235a90ea35639e323", "3188": "29861e66f8e3df0d670c2ee0ca26166d811aa6f1", "3189": "31771d7bb9d1dc36fb26ec49dc7798ccfea366b6", "3191": "002125b55b0d75ef3e025c9d540b2b9005840db5", "3193": "b86028182d977d0c31c8fc96f34c62a3fbcc41d1", "3194": "dea0003210a1172741242d4d169811a48c100835", "3195": "af5ed0628a4a609f70becd29fd081a290ba981a0", "3197": "52fca1ccaf8f4623688955f724f504a5e80c332c", "3204": "ff6b30c14cce8977d6194f6d09147323a937fcd2", "3205": "1809a0aea245442d5a9d0779de5bfcd683dc3eb1", "3207": "427f515997a84e7346356da0a984f4395cad3162", "3210": "0a064552f3913fc4dba0087729563b82dce72ec4", "3211": "5c1c6a259ee5581caffc24e6f648f681cd3cecaf", "3212": "767e28e1a63a6412eb61fc64267fcf136fe3ce85", "3214": "061a934516947612afd964a5b9056ec4738cf6f3", "3215": "2d46ab3d14dba3169f06b3a0171053a1d2140b8f"}, "revision_to_date": {"29": 1530958932000, "44": 1532832060000, "52": 1537217633000, "103": 1539706572000, "119": 1540489521000, "142": 1541914566000, "147": 1542344110000, "159": 1543783281000, "233": 1547191609000, "246": 1548355112000, "269": 1549573658000, "278": 1551152349000, "284": 1551927428000, "343": 1557116901000, "356": 1559055183000, "359": 1559317856000, "380": 1560910205000, "406": 1563339307000, "428": 1567400441000, "444": 1569029417000, "457": 1571246222000, "478": 1574055162000, "554": 1579676141000, "582": 1582587141000, "589": 1583521430000, "685": 1588098607000, "874": 1594058570000, "962": 1596062677000, "963": 1596090154000, "964": 1596090455000, "965": 1596198338000, "966": 1596207525000, "967": 1596216550000, "993": 1598538792000, "994": 1598601830000, "995": 1598602359000, "996": 1598605557000, "997": 1598613265000, "998": 1598622050000, "999": 1598863634000, "1000": 1598885418000, "1001": 1598887610000, "1002": 1598952769000, "1003": 1598976075000, "1004": 1598999156000, "1005": 1599129060000, "1006": 1599141417000, "1007": 1599167084000, "1008": 1599209957000, "1009": 1599226850000, "1010": 1599237163000, "1011": 1599237338000, "1012": 1599242006000, "1013": 1599473654000, "1014": 1599477487000, "1015": 1599479125000, "1016": 1599479484000, "1017": 1599482099000, "1018": 1599486244000, "1019": 1599491374000, "1020": 1599491609000, "1021": 1599497423000, "1022": 1599504789000, "1023": 1599504979000, "1024": 1599560066000, "1025": 1599577482000, "1026": 1599582439000, "1027": 1599582591000, "1028": 1599586967000, "1029": 1599645842000, "1030": 1599670044000, "1031": 1599683646000, "1032": 1599727131000, "1033": 1599745101000, "1034": 1600093570000, "1035": 1600171166000, "1036": 1600177744000, "1037": 1600224471000, "1038": 1600246581000, "1039": 1600248904000, "1040": 1600270228000, "1041": 1600362321000, "1042": 1600367617000, "1043": 1600430819000, "1044": 1600629113000, "1045": 1600670835000, "1046": 1600690868000, "1047": 1600698190000, "1048": 1600703249000, "1049": 1600719565000, "1050": 1600789655000, "1051": 1600820930000, "1052": 1600846780000, "1053": 1600851482000, "1054": 1600852063000, "1055": 1600861144000, "1056": 1600861872000, "1057": 1600872155000, "1058": 1600872548000, "1059": 1600875263000, "1060": 1600927143000, "1061": 1600935372000, "1062": 1600953454000, "1063": 1600957662000, "1064": 1600976676000, "1065": 1600982267000, "1066": 1601023772000, "1067": 1601026759000, "1068": 1601026786000, "1069": 1601050804000, "1070": 1601051162000, "1071": 1601147884000, "1072": 1601225864000, "1073": 1601310807000, "1074": 1601311116000, "1075": 1601311719000, "1076": 1601317204000, "1077": 1601369168000, "1078": 1601384353000, "1079": 1601388942000, "1080": 1601404463000, "1081": 1601419391000, "1082": 1601505473000, "1083": 1601507094000, "1084": 1601562003000, "1085": 1601563997000, "1086": 1601623232000, "1087": 1601905956000, "1088": 1602236762000, "1089": 1602239987000, "1090": 1602590438000, "1091": 1602595003000, "1092": 1602602706000, "1093": 1602618312000, "1094": 1602618835000, "1095": 1602674248000, "1096": 1602684307000, "1097": 1602705555000, "1098": 1602774674000, "1099": 1602781249000, "1100": 1602784236000, "1101": 1602834758000, "1102": 1602835354000, "1103": 1602841854000, "1104": 1602852059000, "1105": 1602877872000, "1106": 1603119418000, "1107": 1603201008000, "1108": 1603215455000, "1109": 1603221925000, "1110": 1603296723000, "1111": 1603355600000, "1112": 1603358876000, "1113": 1603378408000, "1114": 1603397257000, "1115": 1603450196000, "1116": 1603453543000, "1117": 1603484870000, "1118": 1603490434000, "1119": 1603562174000, "1120": 1603799821000, "1121": 1603819705000, "1122": 1603827284000, "1123": 1603866122000, "1124": 1603881111000, "1125": 1603883772000, "1126": 1603889546000, "1127": 1603917687000, "1128": 1603939377000, "1131": 1604055875000, "1142": 1604540455000, "1144": 1604599490000, "1145": 1604924603000, "1146": 1604963155000, "1150": 1605095275000, "1155": 1605297257000, "1156": 1605364249000, "1171": 1606155597000, "1172": 1606305626000, "1173": 1606311588000, "1174": 1606395024000, "1175": 1606759685000, "1176": 1606761858000, "1177": 1606802434000, "1178": 1606822213000, "1179": 1606828913000, "1180": 1606834735000, "1181": 1606872062000, "1182": 1606902868000, "1183": 1606932435000, "1184": 1606998258000, "1185": 1607005014000, "1186": 1607008167000, "1187": 1607070009000, "1188": 1607356197000, "1189": 1607427479000, "1190": 1607453487000, "1196": 1607599567000, "1198": 1607674071000, "1199": 1608046374000, "1200": 1608048806000, "1201": 1608070294000, "1202": 1608145598000, "1203": 1608147615000, "1204": 1608191767000, "1207": 1608216325000, "1208": 1608216598000, "1209": 1608216773000, "1210": 1608273966000, "1211": 1608282616000, "1212": 1608283192000, "1213": 1608293554000, "1214": 1608304159000, "1215": 1608748172000, "1216": 1609270765000, "1217": 1609889391000, "1218": 1610397106000, "1219": 1610450633000, "1220": 1610458811000, "1221": 1610474886000, "1222": 1610485737000, "1223": 1610532523000, "1224": 1610550176000, "1225": 1610573697000, "1226": 1610665006000, "1227": 1610697877000, "1228": 1610702623000, "1229": 1610721846000, "1230": 1610725443000, "1231": 1611063894000, "1232": 1611130571000, "1233": 1611167988000, "1234": 1611566450000, "1235": 1611747254000, "1236": 1611845667000, "1237": 1611847668000, "1238": 1611867387000, "1239": 1611918072000, "1240": 1612100187000, "1241": 1612207852000, "1242": 1612274176000, "1243": 1612305613000, "1244": 1612305855000, "1245": 1612355089000, "1246": 1612357514000, "1247": 1612359873000, "1248": 1612367131000, "1249": 1612376163000, "1250": 1612424120000, "1251": 1612424188000, "1252": 1612529045000, "1253": 1612544520000, "1254": 1612555682000, "1255": 1612785849000, "1256": 1612788026000, "1257": 1612796082000, "1258": 1612799402000, "1259": 1612860778000, "1260": 1612869721000, "1261": 1612897441000, "1262": 1612970254000, "1263": 1612996621000, "1264": 1613036784000, "1265": 1613056966000, "1266": 1613078471000, "1267": 1613120857000, "1268": 1613386929000, "1269": 1613392408000, "1270": 1613394810000, "1271": 1613404117000, "1273": 1613491688000, "1275": 1613656390000, "1276": 1613658575000, "1279": 1614000339000, "1281": 1614182257000, "1283": 1614345007000, "1284": 1614348840000, "1289": 1614619675000, "1293": 1614711697000, "1294": 1614815802000, "1295": 1614818654000, "1296": 1614864975000, "1302": 1614897335000, "1308": 1615235108000, "1309": 1615319792000, "1310": 1615326819000, "1311": 1615390678000, "1312": 1615395500000, "1313": 1615556278000, "1314": 1615580712000, "1315": 1615582044000, "1316": 1615592547000, "1318": 1615832656000, "1319": 1615855720000, "1320": 1615857615000, "1321": 1615915980000, "1322": 1615921498000, "1323": 1615921546000, "1324": 1615925329000, "1325": 1615929228000, "1326": 1615935624000, "1327": 1616008754000, "1328": 1616027978000, "1329": 1616055132000, "1330": 1616062181000, "1331": 1616077293000, "1332": 1616184118000, "1333": 1616188863000, "1334": 1616439379000, "1335": 1617024502000, "1336": 1617025387000, "1337": 1617147841000, "1338": 1617281527000, "1339": 1617630705000, "1340": 1617631113000, "1341": 1617638198000, "1343": 1617984003000, "1344": 1618320380000, "1345": 1618525657000, "1346": 1618844477000, "1347": 1618859095000, "1348": 1618948402000, "1351": 1619474291000, "1352": 1619531365000, "1353": 1619570582000, "1354": 1620043748000, "1355": 1620067867000, "1356": 1620315986000, "1357": 1620354527000, "1358": 1620372606000, "1359": 1620589164000, "1360": 1620761675000, "1363": 1620829030000, "1365": 1620834820000, "1366": 1621085754000, "1367": 1621106964000, "1368": 1621113249000, "1371": 1621344399000, "1372": 1621344741000, "1373": 1621345787000, "1374": 1621579354000, "1375": 1621605471000, "1376": 1621859942000, "1380": 1621867863000, "1382": 1622036294000, "1383": 1622137801000, "1384": 1622563080000, "1385": 1622730796000, "1386": 1622738131000, "1387": 1622808995000, "1388": 1622847554000, "1389": 1623028424000, "1390": 1623058657000, "1391": 1623083693000, "1393": 1623162736000, "1394": 1623233539000, "1395": 1623261504000, "1397": 1623267891000, "1401": 1623907839000, "1402": 1623945348000, "1403": 1624279433000, "1405": 1624475994000, "1407": 1624544956000, "1408": 1624627563000, "1412": 1624632293000, "1415": 1624886986000, "1417": 1624903003000, "1418": 1624929048000, "1419": 1624972569000, "1420": 1625032893000, "1421": 1625051392000, "1422": 1625067188000, "1423": 1625159806000, "1424": 1625516385000, "1425": 1625553565000, "1426": 1625639672000, "1427": 1625656681000, "1428": 1625732931000, "1429": 1626112307000, "1430": 1626126570000, "1431": 1626170891000, "1432": 1626175929000, "1433": 1626286650000, "1435": 1626360076000, "1436": 1626446459000, "1437": 1626465643000, "1438": 1626698097000, "1439": 1626710331000, "1441": 1626783762000, "1442": 1626865357000, "1444": 1626874489000, "1445": 1627301887000, "1446": 1627385639000, "1448": 1628070071000, "1449": 1628141228000, "1450": 1628166660000, "1455": 1628234223000, "1456": 1628242047000, "1457": 1628493685000, "1458": 1628507416000, "1459": 1628510736000, "1461": 1628616611000, "1462": 1628792467000, "1463": 1629179158000, "1464": 1629195043000, "1465": 1629221573000, "1466": 1629367208000, "1467": 1629478635000, "1468": 1629508556000, "1469": 1629736655000, "1470": 1629870007000, "1471": 1629978409000, "1472": 1629990877000, "1475": 1630061044000, "1477": 1630076960000, "1478": 1630394928000, "1479": 1630425713000, "1480": 1630427372000, "1482": 1630482339000, "1483": 1630526392000, "1484": 1631001881000, "1485": 1631124441000, "1486": 1631180162000, "1487": 1631194210000, "1489": 1631266824000, "1490": 1631541875000, "1491": 1631791021000, "1492": 1631803590000, "1493": 1631807953000, "1494": 1631821502000, "1496": 1632145193000, "1498": 1632153164000, "1499": 1632162823000, "1500": 1632228612000, "1501": 1632299661000, "1502": 1632336221000, "1503": 1632397287000, "1504": 1632415059000, "1505": 1632442582000, "1506": 1632451939000, "1507": 1632494358000, "1508": 1632563782000, "1509": 1632733229000, "1511": 1632753198000, "1513": 1632779208000, "1515": 1632816963000, "1516": 1632839732000, "1517": 1632851482000, "1518": 1632865143000, "1521": 1632933772000, "1522": 1632944597000, "1523": 1632994524000, "1524": 1633002357000, "1526": 1633078763000, "1527": 1633096829000, "1528": 1633116185000, "1529": 1633225473000, "1530": 1633482334000, "1541": 1634195585000, "1542": 1634223429000, "1543": 1634237325000, "1544": 1634281877000, "1545": 1634306943000, "1546": 1634624179000, "1548": 1634654557000, "1549": 1634658323000, "1550": 1634672684000, "1554": 1634731835000, "1556": 1634755197000, "1557": 1634836010000, "1559": 1634844063000, "1562": 1634901507000, "1563": 1635145029000, "1564": 1635186418000, "1565": 1635324508000, "1566": 1635336411000, "1567": 1635514226000, "1568": 1635525204000, "1569": 1635543159000, "1570": 1635751131000, "1571": 1635775639000, "1572": 1635873430000, "1576": 1635947217000, "1577": 1636010108000, "1579": 1636370740000, "1580": 1636462487000, "1581": 1636486578000, "1583": 1636488629000, "1584": 1636489447000, "1585": 1636564916000, "1586": 1636714478000, "1587": 1637006792000, "1588": 1637010503000, "1589": 1637055500000, "1590": 1637065656000, "1591": 1637088797000, "1592": 1637142754000, "1593": 1637157737000, "1594": 1637219063000, "1595": 1637248532000, "1596": 1637267426000, "1597": 1637279816000, "1598": 1637285496000, "1599": 1637309275000, "1600": 1637339298000, "1601": 1637352051000, "1602": 1637619305000, "1604": 1637627214000, "1605": 1637654842000, "1606": 1637678592000, "1607": 1637690837000, "1608": 1637717532000, "1609": 1637769969000, "1610": 1637830401000, "1611": 1637833583000, "1612": 1637916263000, "1616": 1638178476000, "1617": 1638192796000, "1618": 1638218506000, "1620": 1638224361000, "1622": 1638236412000, "1623": 1638354417000, "1624": 1638369729000, "1626": 1638380053000, "1627": 1638397503000, "1628": 1638453617000, "1629": 1638472318000, "1631": 1638473483000, "1632": 1638506335000, "1633": 1638531360000, "1635": 1638546722000, "1636": 1638555567000, "1637": 1638858850000, "1638": 1638877270000, "1639": 1638886556000, "1640": 1638907270000, "1641": 1638946022000, "1642": 1638973736000, "1644": 1638982917000, "1645": 1639036958000, "1646": 1639056708000, "1647": 1639119540000, "1648": 1639145526000, "1649": 1639417226000, "1650": 1639432329000, "1651": 1639463122000, "1652": 1639503306000, "1661": 1639513714000, "1664": 1639636757000, "1665": 1639667267000, "1666": 1639678664000, "1667": 1639683074000, "1674": 1639730292000, "1676": 1639751054000, "1677": 1639884254000, "1678": 1640346882000, "1679": 1641323265000, "1681": 1641480222000, "1682": 1641482246000, "1683": 1641585703000, "1684": 1641813791000, "1685": 1641846602000, "1686": 1641895716000, "1687": 1641930310000, "1688": 1641972495000, "1689": 1642007249000, "1690": 1642095880000, "1693": 1642099860000, "1694": 1642115618000, "1695": 1642182622000, "1696": 1642189272000, "1697": 1642448294000, "1698": 1642458570000, "1700": 1642502947000, "1701": 1642718781000, "1702": 1642767915000, "1703": 1642771982000, "1704": 1642790438000, "1705": 1642820450000, "1706": 1642906697000, "1707": 1643008573000, "1708": 1643020144000, "1710": 1643049819000, "1713": 1643062490000, "1714": 1643070581000, "1715": 1643119879000, "1716": 1643161085000, "1717": 1643224120000, "1721": 1643234646000, "1723": 1643245133000, "1724": 1643269683000, "1725": 1643315060000, "1726": 1643317464000, "1727": 1643383663000, "1728": 1643637953000, "1730": 1643647488000, "1731": 1643708883000, "1732": 1643751256000, "1733": 1643898602000, "1734": 1643902270000, "1735": 1643981612000, "1741": 1643994920000, "1742": 1644182780000, "1743": 1644227394000, "1745": 1644261022000, "1746": 1644305142000, "1747": 1644324092000, "1748": 1644423109000, "1755": 1644516541000, "1757": 1644523845000, "1758": 1644564723000, "1759": 1644777597000, "1760": 1645026167000, "1761": 1645038949000, "1762": 1645107916000, "1764": 1645122616000, "1765": 1645127456000, "1766": 1645170221000, "1767": 1645186941000, "1768": 1645238497000, "1769": 1645427664000, "1770": 1645442625000, "1771": 1645515593000, "1775": 1645783920000, "1777": 1645817530000, "1778": 1646059474000, "1780": 1646070452000, "1781": 1646078096000, "1782": 1646128752000, "1783": 1646137800000, "1784": 1646152005000, "1786": 1646165833000, "1787": 1646202681000, "1788": 1646230716000, "1789": 1646246299000, "1790": 1646337912000, "1791": 1646397798000, "1792": 1646667425000, "1793": 1646764474000, "1794": 1646774932000, "1795": 1646927451000, "1796": 1646940279000, "1797": 1647243246000, "1798": 1647275325000, "1799": 1647373349000, "1800": 1647450642000, "1801": 1647526200000, "1806": 1647535785000, "1814": 1647549738000, "1815": 1647550671000, "1816": 1647616930000, "1817": 1647629015000, "1818": 1647968820000, "1819": 1648050919000, "1820": 1648056777000, "1821": 1648093252000, "1822": 1648105721000, "1823": 1648202635000, "1824": 1648562440000, "1825": 1648569496000, "1826": 1648647857000, "1827": 1649185402000, "1828": 1649261856000, "1829": 1649609880000, "1830": 1649660698000, "1831": 1649784518000, "1833": 1649874958000, "1834": 1649961672000, "1835": 1650008258000, "1836": 1650292828000, "1837": 1650366122000, "1839": 1650377498000, "1840": 1650388783000, "1841": 1650402889000, "1842": 1650440794000, "1843": 1650461297000, "1844": 1650468288000, "1845": 1650480629000, "1846": 1650524068000, "1847": 1650555417000, "1848": 1650564403000, "1849": 1651060426000, "1850": 1651126298000, "1851": 1651235915000, "1852": 1651520019000, "1853": 1651665311000, "1861": 1651677141000, "1862": 1651759924000, "1863": 1652714338000, "1864": 1652986519000, "1866": 1652990904000, "1870": 1653375460000, "1871": 1653400348000, "1876": 1653462342000, "1877": 1653472975000, "1878": 1653485419000, "1880": 1653489328000, "1881": 1653564012000, "1882": 1653573964000, "1884": 1653592217000, "1885": 1654005452000, "1886": 1654051901000, "1887": 1654089572000, "1889": 1654117625000, "1891": 1654131074000, "1892": 1654154380000, "1893": 1654263065000, "1894": 1654526862000, "1895": 1654548052000, "1896": 1654623666000, "1898": 1654633805000, "1899": 1654654151000, "1900": 1654661552000, "1901": 1654674378000, "1902": 1654697489000, "1903": 1654705998000, "1904": 1654708017000, "1905": 1654720853000, "1906": 1654732729000, "1907": 1654865818000, "1908": 1655144093000, "1909": 1655211012000, "1910": 1655223147000, "1912": 1655385653000, "1913": 1655387326000, "1914": 1655405253000, "1915": 1655444379000, "1916": 1655850248000, "1917": 1655861902000, "1918": 1656007095000, "1920": 1656017654000, "1924": 1656115094000, "1925": 1656193354000, "1926": 1656353662000, "1927": 1656415946000, "1928": 1656434932000, "1929": 1656456099000, "1930": 1656669875000, "1931": 1656685407000, "1932": 1656750329000, "1933": 1656951608000, "1934": 1657013659000, "1935": 1657102832000, "1936": 1657175556000, "1937": 1657208264000, "1938": 1657226224000, "1939": 1657242574000, "1940": 1657291453000, "1941": 1657306575000, "2049": 1662558734000, "2065": 1663264444000, "2069": 1663318136000, "2071": 1663341136000, "2072": 1663611332000, "2073": 1663662751000, "2074": 1663664208000, "2076": 1663686340000, "2077": 1663701486000, "2078": 1663704570000, "2080": 1663713691000, "2081": 1663750257000, "2083": 1663777268000, "2084": 1663788100000, "2085": 1663851094000, "2087": 1663934045000, "2088": 1663954712000, "2089": 1664022849000, "2090": 1664125569000, "2091": 1664202986000, "2092": 1664281736000, "2093": 1664295205000, "2094": 1664302124000, "2095": 1664340055000, "2096": 1664385552000, "2097": 1664452659000, "2098": 1664455904000, "2099": 1664471385000, "2101": 1664530527000, "2102": 1664806270000, "2103": 1664819149000, "2104": 1664868251000, "2105": 1664880001000, "2106": 1664889325000, "2108": 1664911430000, "2109": 1664975470000, "2110": 1664984637000, "2111": 1664997272000, "2112": 1665053792000, "2113": 1665068058000, "2114": 1665167086000, "2115": 1665169088000, "2116": 1665390684000, "2117": 1665407609000, "2118": 1665413439000, "2119": 1665432434000, "2124": 1665507211000, "2125": 1665520282000, "2126": 1665601095000, "2127": 1665659713000, "2129": 1665732918000, "2130": 1665780043000, "2141": 1666373267000, "2147": 1666897553000, "2148": 1667220198000, "2149": 1667329674000, "2150": 1667377367000, "2151": 1667472860000, "2152": 1667500202000, "2154": 1667502840000, "2155": 1667555546000, "2156": 1667935469000, "2157": 1667943740000, "2158": 1668009857000, "2159": 1668085090000, "2160": 1668175883000, "2161": 1668448524000, "2162": 1668457857000, "2163": 1668507127000, "2165": 1668511254000, "2166": 1668597814000, "2167": 1668633386000, "2168": 1668686211000, "2169": 1668707792000, "2170": 1668769949000, "2171": 1668788847000, "2172": 1668851717000, "2175": 1669051141000, "2176": 1669140303000, "2177": 1669191312000, "2178": 1669211387000, "2179": 1669246929000, "2180": 1669311358000, "2181": 1669372904000, "2193": 1669381591000, "2194": 1669588277000, "2195": 1669668376000, "2196": 1669705987000, "2197": 1669740828000, "2198": 1669819453000, "2199": 1669822330000, "2200": 1669890259000, "2202": 1669927529000, "2205": 1669935872000, "2206": 1669975539000, "2210": 1669997460000, "2215": 1670012714000, "2217": 1670065469000, "2224": 1670152666000, "2225": 1670235016000, "2230": 1670260158000, "2231": 1670270589000, "2232": 1670330093000, "2249": 1670532804000, "2263": 1670861175000, "2266": 1670928756000, "2267": 1671040686000, "2273": 1671215821000, "2283": 1671545817000, "2284": 1671639092000, "2285": 1671651863000, "2286": 1671888400000, "2289": 1672743933000, "2290": 1672838796000, "2292": 1672852601000, "2294": 1672922916000, "2295": 1673267264000, "2296": 1673271699000, "2297": 1673366339000, "2299": 1673534895000, "2300": 1673913132000, "2301": 1673948531000, "2303": 1673967884000, "2314": 1674489840000, "2315": 1674510748000, "2339": 1674650022000, "2340": 1674651461000, "2341": 1674756762000, "2344": 1675088246000, "2345": 1675107936000, "2347": 1675198700000, "2348": 1675263662000, "2349": 1675272051000, "2352": 1675362737000, "2354": 1675697026000, "2355": 1675784491000, "2356": 1675956009000, "2359": 1675987123000, "2360": 1676328735000, "2362": 1676388666000, "2366": 1676482394000, "2367": 1676566692000, "2368": 1676650481000, "2369": 1676725456000, "2371": 1676908931000, "2372": 1677070342000, "2376": 1677163426000, "2377": 1677173394000, "2379": 1677270329000, "2381": 1677525390000, "2383": 1677619158000, "2386": 1677692857000, "2389": 1677778434000, "2390": 1677843140000, "2394": 1677864904000, "2395": 1677950914000, "2397": 1678133281000, "2401": 1678238635000, "2403": 1678313282000, "2409": 1678393718000, "2410": 1678727664000, "2412": 1678815508000, "2413": 1678886320000, "2414": 1678933661000, "2424": 1679419120000, "2433": 1679521268000, "2437": 1679597353000, "2441": 1679699299000, "2442": 1679849671000, "2445": 1679943982000, "2448": 1680040559000, "2455": 1680132825000, "2461": 1680210844000, "2471": 1680303977000, "2473": 1680484011000, "2477": 1680548208000, "2481": 1680653629000, "2483": 1680711990000, "2488": 1680802029000, "2493": 1681235223000, "2495": 1681298340000, "2501": 1681342482000, "2506": 1681410602000, "2507": 1681475780000, "2510": 1681767030000, "2513": 1681846616000, "2515": 1681900373000, "2517": 1682004552000, "2518": 1682015190000, "2519": 1682099804000, "2528": 1682341071000, "2529": 1682358298000, "2532": 1682462766000, "2535": 1682539034000, "2539": 1682606639000, "2541": 1682686807000, "2545": 1683145299000, "2549": 1683243183000, "2550": 1683298865000, "2551": 1683670269000, "2561": 1684279156000, "2563": 1684356142000, "2568": 1684444550000, "2600": 1684961148000, "2604": 1685095298000, "2605": 1685354456000, "2607": 1685479833000, "2614": 1685637293000, "2619": 1686146792000, "2622": 1686304901000, "2625": 1686344119000, "2627": 1686678052000, "2630": 1686745049000, "2633": 1686773497000, "2634": 1686853905000, "2635": 1686921621000, "2638": 1686962866000, "2639": 1687185004000, "2642": 1687284947000, "2651": 1688062334000, "2671": 1688422911000, "2679": 1688653297000, "2691": 1689231415000, "2695": 1689714580000, "2707": 1690566538000, "2714": 1691055912000, "2724": 1691511023000, "2727": 1691580493000, "2729": 1691667507000, "2736": 1692649787000, "2770": 1692697821000, "2771": 1692808221000, "2774": 1692885596000, "2775": 1692892568000, "2776": 1692916921000, "2777": 1693049526000, "2780": 1693242773000, "2782": 1693320737000, "2787": 1693501632000, "2789": 1693579550000, "2793": 1693913740000, "2794": 1693947465000, "2796": 1693984271000, "2797": 1694169781000, "2798": 1694200842000, "2799": 1694435524000, "2802": 1694526267000, "2803": 1694628743000, "2806": 1694794242000, "2807": 1694904829000, "2812": 1695054707000, "2814": 1695081991000, "2817": 1695209182000, "2820": 1695309832000, "2821": 1695598636000, "2825": 1695745216000, "2827": 1695757990000, "2832": 1695895464000, "2839": 1696323402000, "2842": 1696785994000, "2846": 1696874928000, "2847": 1697043520000, "2848": 1697056485000, "2849": 1697211056000, "2852": 1697472374000, "2854": 1697553428000, "2855": 1697622892000, "2856": 1697722070000, "2857": 1697804497000, "2858": 1697922542000, "2859": 1698163308000, "2860": 1698255828000, "2862": 1698336820000, "2863": 1698681563000, "2897": 1698763349000, "2898": 1698939002000, "2899": 1699022506000, "2902": 1699286720000, "2910": 1699374724000, "2914": 1699551643000, "2915": 1699892542000, "2916": 1699991519000, "2919": 1700071016000, "2920": 1700137231000, "2923": 1700148545000, "2927": 1700226019000, "2930": 1700243403000, "2931": 1700250572000, "2933": 1700499039000, "2939": 1700589695000, "2940": 1701109896000, "2943": 1701189192000, "2944": 1701264935000, "2946": 1701355122000, "2947": 1701423208000, "2950": 1701449420000, "2952": 1701712877000, "2954": 1701792944000, "2955": 1701884915000, "2956": 1701969178000, "2961": 1702053074000, "2962": 1702320703000, "2964": 1702395138000, "2968": 1702483987000, "2970": 1702561159000, "2971": 1703091815000, "2972": 1703173151000, "2975": 1704734411000, "2977": 1704896862000, "2980": 1704989907000, "2981": 1705149834000, "2982": 1705405539000, "2984": 1705520543000, "2985": 1705606978000, "2986": 1705672181000, "2993": 1705678519000, "2996": 1706023893000, "2998": 1706117241000, "3002": 1706295983000, "3004": 1706556021000, "3007": 1706619503000, "3009": 1706717873000, "3012": 1706794570000, "3015": 1707145292000, "3021": 1707257542000, "3025": 1707322541000, "3026": 1707514275000, "3027": 1707565952000, "3030": 1707914417000, "3033": 1708105647000, "3038": 1708378637000, "3039": 1708538876000, "3043": 1708625271000, "3045": 1708710976000, "3046": 1708967910000, "3047": 1709028766000, "3048": 1709134566000, "3050": 1709207978000, "3053": 1709291409000, "3055": 1709552881000, "3060": 1709666157000, "3064": 1709744182000, "3065": 1709830211000, "3066": 1709925675000, "3067": 1710180785000, "3075": 1710276432000, "3084": 1710350919000, "3089": 1710456717000, "3090": 1710512118000, "3091": 1710788678000, "3094": 1710883933000, "3096": 1710942963000, "3098": 1711397563000, "3101": 1711488717000, "3102": 1711574977000, "3104": 1711632528000, "3105": 1711972306000, "3107": 1712074375000, "3109": 1712163881000, "3112": 1712255193000, "3114": 1712602955000, "3118": 1712693625000, "3120": 1712703318000, "3131": 1712882619000, "3132": 1712910627000, "3138": 1713201051000, "3143": 1713358450000, "3147": 1713467911000, "3150": 1713811640000, "3152": 1713887121000, "3154": 1714068372000, "3157": 1714161344000, "3158": 1714250445000, "3159": 1714381804000, "3162": 1714510884000, "3164": 1714664871000, "3165": 1714735881000, "3167": 1715178218000, "3168": 1715546096000, "3174": 1715606971000, "3182": 1715766034000, "3188": 1716312142000, "3189": 1716809565000, "3191": 1716998535000, "3193": 1717437548000, "3194": 1717691257000, "3195": 1717795883000, "3197": 1718020830000, "3204": 1718028884000, "3205": 1718035645000, "3207": 1718053150000, "3210": 1718129739000, "3211": 1718194675000, "3212": 1718286566000, "3214": 1718395456000, "3215": 1718485084000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz"], "machine": ["xeon-e5", "xeon-e5-pandas"], "num_cpu": ["44"], "os": ["Linux 5.4.0-54-generic"], "ram": ["131910328"], "python": ["3.11", "3.7", "3.8", "3.9"], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz", "machine": "xeon-e5", "num_cpu": "44", "os": "Linux 5.4.0-54-generic", "ram": "131910328", "python": "3.8", "branch": "main"}, {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz", "machine": "xeon-e5", "num_cpu": "44", "os": "Linux 5.4.0-54-generic", "ram": "131910328", "python": "3.9", "branch": "main"}, {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz", "machine": "xeon-e5-pandas", "num_cpu": "44", "os": "Linux 5.4.0-54-generic", "ram": "131910328", "python": "3.8", "branch": "main"}, {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz", "machine": "xeon-e5-pandas", "num_cpu": "44", "os": "Linux 5.4.0-54-generic", "ram": "131910328", "python": "3.9", "branch": "main"}], "benchmarks": {"benchmarks.TimeArithmetic.time_abs": {"code": "class TimeArithmetic:\n    def time_abs(self, shape, axis):\n        execute(self.df.abs())\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_abs", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "01b4a10fcecd70e83d96ea94b3e5fe00d95d4ea3ad754a3c88ce00ac867d4aed", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_add": {"code": "class TimeArithmetic:\n    def time_add(self, shape, axis):\n        execute(self.df.add(2, axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_add", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b06ded2a223865a4a1123dc666e50ad67ffe54e463ea07f9ca7b2bbeb61440e7", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_aggregate": {"code": "class TimeArithmetic:\n    def time_aggregate(self, shape, axis):\n        execute(self.df.aggregate(lambda df: df.sum(), axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_aggregate", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a644c20121ae70e5696184f2a8c5c2e50aa6d51eacb831789e68a068964084db", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_apply": {"code": "class TimeArithmetic:\n    def time_apply(self, shape, axis):\n        execute(self.df.apply(lambda df: df.sum(), axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_apply", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c71b1131761935c6c7580e7de7126a98d09972fda82b7e88329bab0ef7ebc512", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_count": {"code": "class TimeArithmetic:\n    def time_count(self, shape, axis):\n        execute(self.df.count(axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_count", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f549fa1ea654de072c09d06faffbb0e98285c91d3178f9d56505b2618e4ac120", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_is_in": {"code": "class TimeArithmetic:\n    def time_is_in(self, shape, axis):\n        execute(self.df.isin([0, 2]))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_is_in", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3a55e94d6f1c2bffcff9074b7d0bfb8d2c6aa79a04aded52701aa2f2ae4e74b9", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_mean": {"code": "class TimeArithmetic:\n    def time_mean(self, shape, axis):\n        execute(self.df.mean(axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_mean", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "04d06c1d702cbab0d23ffb352bf2f3f99a2d9491fe66cd094686022951c85e0f", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_median": {"code": "class TimeArithmetic:\n    def time_median(self, shape, axis):\n        execute(self.df.median(axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_median", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f5ace4fe3ee97f53933b5e421c858df410d734a373250430b35f6f012d0e85ea", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_mod": {"code": "class TimeArithmetic:\n    def time_mod(self, shape, axis):\n        execute(self.df.mod(2, axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_mod", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5c734a1c9095313e8cf2298539b6f9deed65cbfda38dd85ef7b16805f42a0eca", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_mode": {"code": "class TimeArithmetic:\n    def time_mode(self, shape, axis):\n        execute(self.df.mode(axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_mode", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "be602af56f540d213ccfcff8ac247623ad80edfe606738d6649680c0b7054927", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_mul": {"code": "class TimeArithmetic:\n    def time_mul(self, shape, axis):\n        execute(self.df.mul(2, axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_mul", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d2011604322d5bb4b64caa6c6326aedd660223e4b7177eb081d48324b26c32dc", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_nunique": {"code": "class TimeArithmetic:\n    def time_nunique(self, shape, axis):\n        execute(self.df.nunique(axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_nunique", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ba5ba63e168a728221eece75ff2b4a7c41a89aabf61c03cc7cdc0c0685d53efe", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_sum": {"code": "class TimeArithmetic:\n    def time_sum(self, shape, axis):\n        execute(self.df.sum(axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_sum", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "88be5b8f0316652de9271acb2f784f70c25e4ccfbe0dfff85b37f3ce725c3179", "warmup_time": -1}, "benchmarks.TimeArithmetic.time_transpose": {"code": "class TimeArithmetic:\n    def time_transpose(self, shape, axis):\n        execute(self.df.transpose())\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeArithmetic:\n    def setup(self, shape, axis):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeArithmetic.time_transpose", "number": 0, "param_names": ["shape", "axis"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e73afa05ef2a50becbd53f92cff0b7a6f67406dfbef5c15bf6c97a519a11cb60", "warmup_time": -1}, "benchmarks.TimeAstype.time_astype": {"code": "class TimeAstype:\n    def time_astype(self, shape, dtype, astype_ncolumns):\n        execute(self.df.astype(self.astype_arg))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeAstype:\n    def setup(self, shape, dtype, astype_ncolumns):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n        if astype_ncolumns == \"all\":\n            self.astype_arg = dtype\n        elif astype_ncolumns == \"one\":\n            self.astype_arg = {\"col1\": dtype}\n        else:\n            raise ValueError(f\"astype_ncolumns: {astype_ncolumns} isn't supported\")", "min_run_count": 2, "name": "benchmarks.TimeAstype.time_astype", "number": 0, "param_names": ["shape", "dtype", "astype_ncolumns"], "params": [["[5000, 5000]", "[1000000, 10]"], ["'float64'", "'category'"], ["'one'", "'all'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "60b93895eea06f4db20e2e7022d07783f11f0f2a15f9e1544f0c3da19f3f838f", "warmup_time": -1}, "benchmarks.TimeBinaryOp.time_binary_op": {"code": "class TimeBinaryOp:\n    def time_binary_op(self, shapes, binary_op, axis):\n        execute(self.op(self.df2, axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeBinaryOp:\n    def setup(self, shapes, binary_op, axis):\n        self.df1 = generate_dataframe(\"int\", *shapes[0], RAND_LOW, RAND_HIGH)\n        self.df2 = generate_dataframe(\"int\", *shapes[1], RAND_LOW, RAND_HIGH)\n        self.op = getattr(self.df1, binary_op)", "min_run_count": 2, "name": "benchmarks.TimeBinaryOp.time_binary_op", "number": 0, "param_names": ["shapes", "binary_op", "axis"], "params": [["[[5000, 5000], [5000, 5000]]", "[[500000, 20], [1000000, 10]]"], ["'mul'"], ["0", "1"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "efc43b5e0d52ab7f22e2f7003c672ade3723ee6af4337db2df32dbf0229761f0", "warmup_time": -1}, "benchmarks.TimeBinaryOpSeries.time_binary_op_series": {"code": "class TimeBinaryOpSeries:\n    def time_binary_op_series(self, shapes, binary_op):\n        execute(self.op(self.series2))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeBinaryOpSeries:\n    def setup(self, shapes, binary_op):\n        df1 = generate_dataframe(\"int\", *shapes[0], RAND_LOW, RAND_HIGH)\n        df2 = generate_dataframe(\"int\", *shapes[1], RAND_LOW, RAND_HIGH)\n        self.series1 = df1[df1.columns[0]]\n        self.series2 = df2[df2.columns[0]]\n        self.op = getattr(self.series1, binary_op)\n        execute(self.series1)\n        execute(self.series2)", "min_run_count": 2, "name": "benchmarks.TimeBinaryOpSeries.time_binary_op_series", "number": 0, "param_names": ["shapes", "binary_op"], "params": [["[[500000, 1], [1000000, 1]]", "[[500000, 1], [500000, 1]]"], ["'mul'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "726504102714186f95d7a1d4332dd3670a52f5c4475718e48fe0603b25959914", "warmup_time": -1}, "benchmarks.TimeConcat.time_concat": {"code": "class TimeConcat:\n    def time_concat(self, shapes, how, axis, ignore_index):\n        execute(\n            IMPL.concat(\n                [self.df1, self.df2], axis=axis, join=how, ignore_index=ignore_index\n            )\n        )\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeConcat:\n    def setup(self, shapes, how, axis, ignore_index):\n        self.df1 = generate_dataframe(\"int\", *shapes[0], RAND_LOW, RAND_HIGH)\n        self.df2 = generate_dataframe(\"int\", *shapes[1], RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeConcat.time_concat", "number": 0, "param_names": ["shapes", "how", "axis", "ignore_index"], "params": [["[[5000, 5000], [5000, 5000]]", "[[500000, 20], [1000000, 10]]"], ["'inner'", "'outer'"], ["0", "1"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b7e9f8fa534d19b45940d79ae9955ad145a2f419892d062560ff785a71b7324e", "warmup_time": -1}, "benchmarks.TimeDatetimeAccessor.time_dt_accessor": {"code": "class TimeDatetimeAccessor:\n    def time_dt_accessor(self, shape):\n        execute(self.series.dt)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeDatetimeAccessor:\n    def setup(self, shape):\n        self.series = IMPL.Series(\n            IMPL.timedelta_range(\"1 days\", periods=shape[0], freq=\"h\")\n        )\n        execute(self.series)", "min_run_count": 2, "name": "benchmarks.TimeDatetimeAccessor.time_dt_accessor", "number": 0, "param_names": ["shape"], "params": [["[100000, 1]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5aa3041a80bba5711fb6cefb02615ebfb2e7f317974a8b6c8634de55423db941", "warmup_time": -1}, "benchmarks.TimeDatetimeAccessor.time_timedelta_days": {"code": "class TimeDatetimeAccessor:\n    def time_timedelta_days(self, shape):\n        execute(self.series.dt.days)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeDatetimeAccessor:\n    def setup(self, shape):\n        self.series = IMPL.Series(\n            IMPL.timedelta_range(\"1 days\", periods=shape[0], freq=\"h\")\n        )\n        execute(self.series)", "min_run_count": 2, "name": "benchmarks.TimeDatetimeAccessor.time_timedelta_days", "number": 0, "param_names": ["shape"], "params": [["[100000, 1]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4b534d0f817199eb24114991087402515e52121b261fc5421b86b8c04e925916", "warmup_time": -1}, "benchmarks.TimeDatetimeAccessor.time_timedelta_seconds": {"code": "class TimeDatetimeAccessor:\n    def time_timedelta_seconds(self, shape):\n        execute(self.series.dt.seconds)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeDatetimeAccessor:\n    def setup(self, shape):\n        self.series = IMPL.Series(\n            IMPL.timedelta_range(\"1 days\", periods=shape[0], freq=\"h\")\n        )\n        execute(self.series)", "min_run_count": 2, "name": "benchmarks.TimeDatetimeAccessor.time_timedelta_seconds", "number": 0, "param_names": ["shape"], "params": [["[100000, 1]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "385d670206287f645d2414386c8fc06dd7e0e95da8e08b06e057899eca19cc5e", "warmup_time": -1}, "benchmarks.TimeDescribe.time_describe": {"code": "class TimeDescribe:\n    def time_describe(self, shape):\n        execute(self.df.describe())\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeDescribe:\n    def setup(self, shape):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeDescribe.time_describe", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "72f8a4b3acde0a7d3be2fa3d85b2692d27e6328509f48985ab690d687c397efb", "warmup_time": -1}, "benchmarks.TimeDrop.time_drop": {"code": "class TimeDrop:\n    def time_drop(self, shape, axis, drop_ncols):\n        execute(self.df.drop(self.labels, axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeDrop:\n    def setup(self, shape, axis, drop_ncols):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n        drop_count = (\n            int(len(self.df.axes[axis]) * drop_ncols)\n            if isinstance(drop_ncols, float)\n            else drop_ncols\n        )\n        self.labels = self.df.axes[axis][:drop_count]", "min_run_count": 2, "name": "benchmarks.TimeDrop.time_drop", "number": 0, "param_names": ["shape", "axis", "drop_ncols"], "params": [["[5000, 5000]", "[1000000, 10]"], ["0", "1"], ["1", "0.8"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3458015b4c521ad198646945b5db521c7d1465dc099f2f10f2d6ce057fcf73a8", "warmup_time": -1}, "benchmarks.TimeDropDuplicatesDataframe.time_drop_dups": {"code": "class TimeDropDuplicatesDataframe:\n    def time_drop_dups(self, shape):\n        execute(self.df.drop_duplicates(self.df.columns[:-1]))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeDropDuplicatesDataframe:\n    def setup(self, shape):\n        rows, cols = shape\n        N = rows // 10\n        K = 10\n        data = {}\n        # dataframe would have cols-1 keys(strings) and one value(int) column\n        for col in range(cols - 1):\n            data[\"key\" + str(col + 1)] = IMPL.Index(\n                [f\"i-{i}\" for i in range(N)], dtype=object\n            ).values.repeat(K)\n        data[\"value\"] = np.random.randn(N * K)\n        self.df = IMPL.DataFrame(data)\n        execute(self.df)", "min_run_count": 2, "name": "benchmarks.TimeDropDuplicatesDataframe.time_drop_dups", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4165eea0402be5ac7ae6a8c218a0d80090a46d3fdefd7dcffeadaa2c47e7e1ad", "warmup_time": -1}, "benchmarks.TimeDropDuplicatesDataframe.time_drop_dups_inplace": {"code": "class TimeDropDuplicatesDataframe:\n    def time_drop_dups_inplace(self, shape):\n        self.df.drop_duplicates(self.df.columns[:-1], inplace=True)\n        execute(self.df)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeDropDuplicatesDataframe:\n    def setup(self, shape):\n        rows, cols = shape\n        N = rows // 10\n        K = 10\n        data = {}\n        # dataframe would have cols-1 keys(strings) and one value(int) column\n        for col in range(cols - 1):\n            data[\"key\" + str(col + 1)] = IMPL.Index(\n                [f\"i-{i}\" for i in range(N)], dtype=object\n            ).values.repeat(K)\n        data[\"value\"] = np.random.randn(N * K)\n        self.df = IMPL.DataFrame(data)\n        execute(self.df)", "min_run_count": 2, "name": "benchmarks.TimeDropDuplicatesDataframe.time_drop_dups_inplace", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ea9970b769aa77f9708a7eec8a1c585f0d0704869dccb5aca701f23487c6ddb6", "warmup_time": -1}, "benchmarks.TimeDropDuplicatesSeries.time_drop_dups": {"code": "class TimeDropDuplicatesSeries:\n    def time_drop_dups(self, shape):\n        execute(self.series.drop_duplicates())\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeDropDuplicatesSeries:\n    def setup(self, shape):\n        rows = shape[0]\n        self.series = IMPL.Series(\n            np.tile(\n                IMPL.Index([f\"i-{i}\" for i in range(rows // 10)], dtype=object).values,\n                10,\n            )\n        )\n        execute(self.series)", "min_run_count": 2, "name": "benchmarks.TimeDropDuplicatesSeries.time_drop_dups", "number": 0, "param_names": ["shape"], "params": [["[100000, 1]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "eadac979a8ae889c473d3313e919953f441bb935f6ec27c19828fc4b2771b056", "warmup_time": -1}, "benchmarks.TimeDropDuplicatesSeries.time_drop_dups_string": {"code": "class TimeDropDuplicatesSeries:\n    def time_drop_dups_string(self, shape):\n        self.series.drop_duplicates(inplace=True)\n        execute(self.series)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeDropDuplicatesSeries:\n    def setup(self, shape):\n        rows = shape[0]\n        self.series = IMPL.Series(\n            np.tile(\n                IMPL.Index([f\"i-{i}\" for i in range(rows // 10)], dtype=object).values,\n                10,\n            )\n        )\n        execute(self.series)", "min_run_count": 2, "name": "benchmarks.TimeDropDuplicatesSeries.time_drop_dups_string", "number": 0, "param_names": ["shape"], "params": [["[100000, 1]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f0ff4f90bac7b9df4ca6b49224bb29ee5478288c69b3b2fa2a4026fed3dbbd76", "warmup_time": -1}, "benchmarks.TimeDropna.time_dropna": {"code": "class TimeDropna:\n    def time_dropna(self, how, axis, shape):\n        execute(self.df.dropna(how=how, axis=axis))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeDropna:\n    def setup(self, how, axis, shape):\n        row, col = shape\n        self.df = IMPL.DataFrame(np.random.randn(row, col))\n        self.df.iloc[row // 20 : row // 10, col // 3 : col // 2] = np.nan\n        self.df[\"foo\"] = \"bar\"\n        execute(self.df)", "min_run_count": 2, "name": "benchmarks.TimeDropna.time_dropna", "number": 0, "param_names": ["how", "axis", "shape"], "params": [["'all'", "'any'"], ["0", "1"], ["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "31b4cb1f4ce1f10774bef57934fd5b0f5c99d6597ffbc97886ad18e4d2e9f1b6", "warmup_time": -1}, "benchmarks.TimeEquals.time_frame_float_equal": {"code": "class TimeEquals:\n    def time_frame_float_equal(self, shape):\n        self.df.equals(self.df)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeEquals:\n    def setup(self, shape):\n        self.df = IMPL.DataFrame(np.random.randn(*shape))\n        self.df.iloc[-1, -1] = np.nan\n        execute(self.df)", "min_run_count": 2, "name": "benchmarks.TimeEquals.time_frame_float_equal", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f014b9f5101b85fa876297856777ac578d1186fb61f12bb517e672f472019bc9", "warmup_time": -1}, "benchmarks.TimeExplode.time_explode": {"code": "class TimeExplode:\n    def time_explode(self, shape):\n        execute(self.df.explode(\"col1\"))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeExplode:\n    def setup(self, shape):\n        self.df = generate_dataframe(\n            \"int\", *shape, RAND_LOW, RAND_HIGH, gen_unique_key=True\n        )", "min_run_count": 2, "name": "benchmarks.TimeExplode.time_explode", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6718484859b2e244f07c03efef417010b36d8531e1b192881dd89a6205ece38d", "warmup_time": -1}, "benchmarks.TimeFillnaDataFrame.time_fillna": {"code": "class TimeFillnaDataFrame:\n    def time_fillna(self, value_type, shape, limit):\n        execute(self.df.fillna(**self.kw))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeFillnaDataFrame:\n    def setup(self, value_type, shape, limit):\n        self.df = gen_nan_data(*shape)\n        columns = self.df.columns\n    \n        if value_type == \"scalar\":\n            self.value = 18.19\n        elif value_type == \"dict\":\n            self.value = {k: i * 1.23 for i, k in enumerate(columns)}\n        elif value_type == \"Series\":\n            self.value = IMPL.Series(\n                [i * 1.23 for i in range(len(columns))], index=columns\n            )\n        elif value_type == \"DataFrame\":\n            self.value = IMPL.DataFrame(\n                {\n                    k: [i + j * 1.23 for j in range(shape[0])]\n                    for i, k in enumerate(columns)\n                },\n                index=IMPL.RangeIndex(shape[0]),\n                columns=columns,\n            )\n        else:\n            assert False\n        limit = int(limit * shape[0]) if limit else None\n        self.kw = {\"value\": self.value, \"limit\": limit}", "min_run_count": 2, "name": "benchmarks.TimeFillnaDataFrame.time_fillna", "number": 0, "param_names": ["value_type", "shape", "limit"], "params": [["'scalar'", "'dict'", "'DataFrame'", "'Series'"], ["[5000, 5000]", "[1000000, 10]"], ["None", "0.8"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b5be6c06cbddf7b3cf8c531c85f039869b57681116aa80ac1a4dcc24f58a4c0e", "warmup_time": -1}, "benchmarks.TimeFillnaDataFrame.time_fillna_inplace": {"code": "class TimeFillnaDataFrame:\n    def time_fillna_inplace(self, value_type, shape, limit):\n        self.df.fillna(inplace=True, **self.kw)\n        execute(self.df)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeFillnaDataFrame:\n    def setup(self, value_type, shape, limit):\n        self.df = gen_nan_data(*shape)\n        columns = self.df.columns\n    \n        if value_type == \"scalar\":\n            self.value = 18.19\n        elif value_type == \"dict\":\n            self.value = {k: i * 1.23 for i, k in enumerate(columns)}\n        elif value_type == \"Series\":\n            self.value = IMPL.Series(\n                [i * 1.23 for i in range(len(columns))], index=columns\n            )\n        elif value_type == \"DataFrame\":\n            self.value = IMPL.DataFrame(\n                {\n                    k: [i + j * 1.23 for j in range(shape[0])]\n                    for i, k in enumerate(columns)\n                },\n                index=IMPL.RangeIndex(shape[0]),\n                columns=columns,\n            )\n        else:\n            assert False\n        limit = int(limit * shape[0]) if limit else None\n        self.kw = {\"value\": self.value, \"limit\": limit}", "min_run_count": 2, "name": "benchmarks.TimeFillnaDataFrame.time_fillna_inplace", "number": 0, "param_names": ["value_type", "shape", "limit"], "params": [["'scalar'", "'dict'", "'DataFrame'", "'Series'"], ["[5000, 5000]", "[1000000, 10]"], ["None", "0.8"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6f3b82c2cb3ef9b6f703c833eed50f48a5e560e68986722ce1e691427f85f6a6", "warmup_time": -1}, "benchmarks.TimeFillnaMethodDataframe.time_float_32": {"code": "class TimeFillnaMethodDataframe:\n    def time_float_32(self, shape, method):\n        execute(self.df_ts_float32.fillna(method=method))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeFillnaMethodDataframe:\n    def setup(self, shape, method):\n        self.idx = IMPL.date_range(\"1/1/2000\", periods=shape[0], freq=\"1min\")\n        df_ts = IMPL.DataFrame(np.random.randn(*shape), index=self.idx)[::2]\n        self.df_ts_reindexed = df_ts.reindex(self.idx)\n        self.df_ts_float32 = self.df_ts_reindexed.astype(\"float32\")\n        execute(self.df_ts_reindexed), execute(self.df_ts_float32)", "min_run_count": 2, "name": "benchmarks.TimeFillnaMethodDataframe.time_float_32", "number": 0, "param_names": ["shape", "method"], "params": [["[5000, 5000]", "[1000000, 10]"], ["'pad'", "'backfill'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "37b50e15102678b23534ef0bcbe7c5b191de48c9d9ff14a30d7a8501644a157c", "warmup_time": -1}, "benchmarks.TimeFillnaMethodDataframe.time_reindexed": {"code": "class TimeFillnaMethodDataframe:\n    def time_reindexed(self, shape, method):\n        execute(self.df_ts_reindexed.fillna(method=method))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeFillnaMethodDataframe:\n    def setup(self, shape, method):\n        self.idx = IMPL.date_range(\"1/1/2000\", periods=shape[0], freq=\"1min\")\n        df_ts = IMPL.DataFrame(np.random.randn(*shape), index=self.idx)[::2]\n        self.df_ts_reindexed = df_ts.reindex(self.idx)\n        self.df_ts_float32 = self.df_ts_reindexed.astype(\"float32\")\n        execute(self.df_ts_reindexed), execute(self.df_ts_float32)", "min_run_count": 2, "name": "benchmarks.TimeFillnaMethodDataframe.time_reindexed", "number": 0, "param_names": ["shape", "method"], "params": [["[5000, 5000]", "[1000000, 10]"], ["'pad'", "'backfill'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4008426308104d700048881a026ff72c1f77399217444f5b0d5bde9c5c10c117", "warmup_time": -1}, "benchmarks.TimeFillnaMethodSeries.time_float_32": {"code": "class TimeFillnaMethodSeries:\n    def time_float_32(self, shape, method):\n        execute(self.ts_float32.fillna(method=method))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeFillnaMethodSeries:\n    def setup(self, shape, method):\n        N = shape[0]\n        self.idx = IMPL.date_range(\"1/1/2000\", periods=N, freq=\"1min\")\n        ts = IMPL.Series(np.random.randn(N), index=self.idx)[::2]\n        self.ts_reindexed = ts.reindex(self.idx)\n        self.ts_float32 = self.ts_reindexed.astype(\"float32\")\n        execute(self.ts_reindexed), execute(self.ts_float32)", "min_run_count": 2, "name": "benchmarks.TimeFillnaMethodSeries.time_float_32", "number": 0, "param_names": ["shape", "method"], "params": [["[100000, 1]"], ["'pad'", "'backfill'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d93af3841c222510aa8a59a84c7160178be422ee6a55d4f6dd16c68ff44fa8d8", "warmup_time": -1}, "benchmarks.TimeFillnaMethodSeries.time_reindexed": {"code": "class TimeFillnaMethodSeries:\n    def time_reindexed(self, shape, method):\n        execute(self.ts_reindexed.fillna(method=method))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeFillnaMethodSeries:\n    def setup(self, shape, method):\n        N = shape[0]\n        self.idx = IMPL.date_range(\"1/1/2000\", periods=N, freq=\"1min\")\n        ts = IMPL.Series(np.random.randn(N), index=self.idx)[::2]\n        self.ts_reindexed = ts.reindex(self.idx)\n        self.ts_float32 = self.ts_reindexed.astype(\"float32\")\n        execute(self.ts_reindexed), execute(self.ts_float32)", "min_run_count": 2, "name": "benchmarks.TimeFillnaMethodSeries.time_reindexed", "number": 0, "param_names": ["shape", "method"], "params": [["[100000, 1]"], ["'pad'", "'backfill'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "454a52557ff470f79eb4ef6b32a09370f52377c03f2a8d75340002e5eb1603c1", "warmup_time": -1}, "benchmarks.TimeFillnaSeries.time_fillna": {"code": "class TimeFillnaSeries:\n    def time_fillna(self, value_type, shape, limit):\n        execute(self.series.fillna(**self.kw))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeFillnaSeries:\n    def setup(self, value_type, shape, limit):\n        self.series = gen_nan_data(*shape)\n    \n        if value_type == \"scalar\":\n            self.value = 18.19\n        elif value_type == \"dict\":\n            self.value = {k: k * 1.23 for k in range(shape[0])}\n        elif value_type == \"Series\":\n            self.value = IMPL.Series(\n                [k * 1.23 for k in range(shape[0])], index=IMPL.RangeIndex(shape[0])\n            )\n        else:\n            assert False\n        limit = int(limit * shape[0]) if limit else None\n        self.kw = {\"value\": self.value, \"limit\": limit}", "min_run_count": 2, "name": "benchmarks.TimeFillnaSeries.time_fillna", "number": 0, "param_names": ["value_type", "shape", "limit"], "params": [["'scalar'", "'dict'", "'Series'"], ["[100000, 1]"], ["None", "0.8"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "64666a6813e5161c8b484ea268fd03d398ff5a60496c13a29b1d7fbf4a3e2b77", "warmup_time": -1}, "benchmarks.TimeFillnaSeries.time_fillna_inplace": {"code": "class TimeFillnaSeries:\n    def time_fillna_inplace(self, value_type, shape, limit):\n        self.series.fillna(inplace=True, **self.kw)\n        execute(self.series)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeFillnaSeries:\n    def setup(self, value_type, shape, limit):\n        self.series = gen_nan_data(*shape)\n    \n        if value_type == \"scalar\":\n            self.value = 18.19\n        elif value_type == \"dict\":\n            self.value = {k: k * 1.23 for k in range(shape[0])}\n        elif value_type == \"Series\":\n            self.value = IMPL.Series(\n                [k * 1.23 for k in range(shape[0])], index=IMPL.RangeIndex(shape[0])\n            )\n        else:\n            assert False\n        limit = int(limit * shape[0]) if limit else None\n        self.kw = {\"value\": self.value, \"limit\": limit}", "min_run_count": 2, "name": "benchmarks.TimeFillnaSeries.time_fillna_inplace", "number": 0, "param_names": ["value_type", "shape", "limit"], "params": [["'scalar'", "'dict'", "'Series'"], ["[100000, 1]"], ["None", "0.8"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5d05206e6082e78e82fe4df0d1c96471715673bc672a200091e2e4e8bd728a68", "warmup_time": -1}, "benchmarks.TimeGroupByDefaultAggregations.time_groupby_count": {"code": "class TimeGroupByDefaultAggregations:\n    def time_groupby_count(self, *args, **kwargs):\n        execute(self.df.groupby(by=self.groupby_columns).count())\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseTimeGroupBy:\n    def setup(self, shape, ngroups=5, groupby_ncols=1):\n        ngroups = translator_groupby_ngroups(ngroups, shape)\n        self.df, self.groupby_columns = generate_dataframe(\n            \"int\",\n            *shape,\n            RAND_LOW,\n            RAND_HIGH,\n            groupby_ncols,\n            count_groups=ngroups,\n        )", "min_run_count": 2, "name": "benchmarks.TimeGroupByDefaultAggregations.time_groupby_count", "number": 0, "param_names": ["shape", "ngroups"], "params": [["[5000, 5000]", "[1000000, 10]"], ["100", "'huge_amount_groups'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "63423947676e7476cfa911ff91092d5da2f16951217e55b24ec43f1498dec0ec", "warmup_time": -1}, "benchmarks.TimeGroupByDefaultAggregations.time_groupby_mean": {"code": "class TimeGroupByDefaultAggregations:\n    def time_groupby_mean(self, *args, **kwargs):\n        execute(self.df.groupby(by=self.groupby_columns).mean())\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseTimeGroupBy:\n    def setup(self, shape, ngroups=5, groupby_ncols=1):\n        ngroups = translator_groupby_ngroups(ngroups, shape)\n        self.df, self.groupby_columns = generate_dataframe(\n            \"int\",\n            *shape,\n            RAND_LOW,\n            RAND_HIGH,\n            groupby_ncols,\n            count_groups=ngroups,\n        )", "min_run_count": 2, "name": "benchmarks.TimeGroupByDefaultAggregations.time_groupby_mean", "number": 0, "param_names": ["shape", "ngroups"], "params": [["[5000, 5000]", "[1000000, 10]"], ["100", "'huge_amount_groups'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bcf433a6cd129ceb305e8145be5cd197e30f89e7ef78501392188b3e00fa0386", "warmup_time": -1}, "benchmarks.TimeGroupByDefaultAggregations.time_groupby_size": {"code": "class TimeGroupByDefaultAggregations:\n    def time_groupby_size(self, *args, **kwargs):\n        execute(self.df.groupby(by=self.groupby_columns).size())\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseTimeGroupBy:\n    def setup(self, shape, ngroups=5, groupby_ncols=1):\n        ngroups = translator_groupby_ngroups(ngroups, shape)\n        self.df, self.groupby_columns = generate_dataframe(\n            \"int\",\n            *shape,\n            RAND_LOW,\n            RAND_HIGH,\n            groupby_ncols,\n            count_groups=ngroups,\n        )", "min_run_count": 2, "name": "benchmarks.TimeGroupByDefaultAggregations.time_groupby_size", "number": 0, "param_names": ["shape", "ngroups"], "params": [["[5000, 5000]", "[1000000, 10]"], ["100", "'huge_amount_groups'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3cdb811ca8efa9a22c7fc1a7e043b12502a902a800d056e81bc9993ab80713b3", "warmup_time": -1}, "benchmarks.TimeGroupByDefaultAggregations.time_groupby_sum": {"code": "class TimeGroupByDefaultAggregations:\n    def time_groupby_sum(self, *args, **kwargs):\n        execute(self.df.groupby(by=self.groupby_columns).sum())\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseTimeGroupBy:\n    def setup(self, shape, ngroups=5, groupby_ncols=1):\n        ngroups = translator_groupby_ngroups(ngroups, shape)\n        self.df, self.groupby_columns = generate_dataframe(\n            \"int\",\n            *shape,\n            RAND_LOW,\n            RAND_HIGH,\n            groupby_ncols,\n            count_groups=ngroups,\n        )", "min_run_count": 2, "name": "benchmarks.TimeGroupByDefaultAggregations.time_groupby_sum", "number": 0, "param_names": ["shape", "ngroups"], "params": [["[5000, 5000]", "[1000000, 10]"], ["100", "'huge_amount_groups'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f4df23efdaa1781452f15be8bf9c38d5cad55dc203edbdda4847ee6b47210d83", "warmup_time": -1}, "benchmarks.TimeGroupByDictionaryAggregation.time_groupby_dict_agg": {"code": "class TimeGroupByDictionaryAggregation:\n    def time_groupby_dict_agg(self, *args, **kwargs):\n        execute(self.df.groupby(by=self.groupby_columns).agg(self.agg_dict))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeGroupByDictionaryAggregation:\n    def setup(self, shape, ngroups, operation_type):\n        super().setup(shape, ngroups)\n        self.cols_to_agg = self.df.columns[1:4]\n        operations = self.operations[operation_type]\n        self.agg_dict = {\n            c: operations[i % len(operations)] for i, c in enumerate(self.cols_to_agg)\n        }", "min_run_count": 2, "name": "benchmarks.TimeGroupByDictionaryAggregation.time_groupby_dict_agg", "number": 0, "param_names": ["shape", "ngroups", "operation_type"], "params": [["[5000, 5000]", "[1000000, 10]"], ["100", "'huge_amount_groups'"], ["'reduce'", "'aggregation'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "43e309331c34cf780938958820c26a2e2b6afbeb6a879edb8dcfec1a464c8a57", "warmup_time": -1}, "benchmarks.TimeGroupByMultiColumn.time_groupby_agg_mean": {"code": "class TimeGroupByMultiColumn:\n    def time_groupby_agg_mean(self, *args, **kwargs):\n        execute(self.df.groupby(by=self.groupby_columns).apply(lambda df: df.mean()))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseTimeGroupBy:\n    def setup(self, shape, ngroups=5, groupby_ncols=1):\n        ngroups = translator_groupby_ngroups(ngroups, shape)\n        self.df, self.groupby_columns = generate_dataframe(\n            \"int\",\n            *shape,\n            RAND_LOW,\n            RAND_HIGH,\n            groupby_ncols,\n            count_groups=ngroups,\n        )", "min_run_count": 2, "name": "benchmarks.TimeGroupByMultiColumn.time_groupby_agg_mean", "number": 0, "param_names": ["shape", "ngroups", "groupby_ncols"], "params": [["[5000, 5000]", "[1000000, 10]"], ["100", "'huge_amount_groups'"], ["6"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5c1595b7bd429c51f814ba334a90cd69f0c58fec29b8a4c634f8242649d9e01f", "warmup_time": -1}, "benchmarks.TimeGroupByMultiColumn.time_groupby_agg_quan": {"code": "class TimeGroupByMultiColumn:\n    def time_groupby_agg_quan(self, *args, **kwargs):\n        execute(self.df.groupby(by=self.groupby_columns).agg(\"quantile\"))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseTimeGroupBy:\n    def setup(self, shape, ngroups=5, groupby_ncols=1):\n        ngroups = translator_groupby_ngroups(ngroups, shape)\n        self.df, self.groupby_columns = generate_dataframe(\n            \"int\",\n            *shape,\n            RAND_LOW,\n            RAND_HIGH,\n            groupby_ncols,\n            count_groups=ngroups,\n        )", "min_run_count": 2, "name": "benchmarks.TimeGroupByMultiColumn.time_groupby_agg_quan", "number": 0, "param_names": ["shape", "ngroups", "groupby_ncols"], "params": [["[5000, 5000]", "[1000000, 10]"], ["100", "'huge_amount_groups'"], ["6"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "50ae1cd91cc4847545e60def4db8a3aae7791df32c250b7fab664ff6afbb7745", "warmup_time": -1}, "benchmarks.TimeGroups.time_series_groups": {"code": "class TimeGroups:\n    def time_series_groups(self, shape):\n        self.series.groupby(self.series).groups\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeGroups:\n    def setup(self, shape):\n        self.series = IMPL.Series(np.random.randint(0, 100, size=shape[0]))\n        execute(self.series)", "min_run_count": 2, "name": "benchmarks.TimeGroups.time_series_groups", "number": 0, "param_names": ["shape"], "params": [["[100000, 1]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "49d19bb2dfbeae4994ac63644d1978aaaf9f2ff4a6c6b8d7dc697f3ab898c2eb", "warmup_time": -1}, "benchmarks.TimeGroups.time_series_indices": {"code": "class TimeGroups:\n    def time_series_indices(self, shape):\n        self.series.groupby(self.series).indices\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeGroups:\n    def setup(self, shape):\n        self.series = IMPL.Series(np.random.randint(0, 100, size=shape[0]))\n        execute(self.series)", "min_run_count": 2, "name": "benchmarks.TimeGroups.time_series_indices", "number": 0, "param_names": ["shape"], "params": [["[100000, 1]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a3fb3bc21581284efd01af28ab8ceb007db943464ade69fee1e1e3c10b8797b9", "warmup_time": -1}, "benchmarks.TimeHead.time_head": {"code": "class TimeHead:\n    def time_head(self, shape, head_count):\n        execute(self.df.head(self.head_count))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeHead:\n    def setup(self, shape, head_count):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n        self.head_count = (\n            int(head_count * len(self.df.index))\n            if isinstance(head_count, float)\n            else head_count\n        )", "min_run_count": 2, "name": "benchmarks.TimeHead.time_head", "number": 0, "param_names": ["shape", "head_count"], "params": [["[5000, 5000]", "[1000000, 10]"], ["5", "0.8"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1901cca17a7a871a76b40dd147a082678455f510a16dc2cc6abe0c6973be0c8e", "warmup_time": -1}, "benchmarks.TimeIndexing.time_iloc": {"code": "class TimeIndexing:\n    def time_iloc(self, shape, indexer_type):\n        # Pandas doesn't implement `df.iloc[series boolean_mask]` and raises an exception on it.\n        # Replacing this with the semantically equivalent construction:\n        if indexer_type != \"bool_series\":\n            execute(self.df.iloc[self.indexer])\n        else:\n            execute(self.df[self.indexer])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexing:\n    def setup(self, shape, indexer_type):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n    \n        self.indexer = self.indexer_getters[indexer_type](self.df)\n        if isinstance(self.indexer, (IMPL.Series, IMPL.DataFrame)):\n            # HACK: Triggering `dtypes` meta-data computation in advance,\n            # so it won't affect the `loc/iloc` time:\n            self.indexer.dtypes", "min_run_count": 2, "name": "benchmarks.TimeIndexing.time_iloc", "number": 0, "param_names": ["shape", "indexer_type"], "params": [["[5000, 5000]", "[1000000, 10]"], ["'bool_array'", "'bool_series'", "'scalar'", "'slice'", "'continuous_slice'", "'numpy_array_take_all_values'", "'python_list_take_10_values'", "'function'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a04ccaa709792c5de70f8c8f1a466c8dfbc6b83dadbf5a1ec3a7666f6cc8858e", "warmup_time": -1}, "benchmarks.TimeIndexing.time_loc": {"code": "class TimeIndexing:\n    def time_loc(self, shape, indexer_type):\n        execute(self.df.loc[self.indexer])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexing:\n    def setup(self, shape, indexer_type):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n    \n        self.indexer = self.indexer_getters[indexer_type](self.df)\n        if isinstance(self.indexer, (IMPL.Series, IMPL.DataFrame)):\n            # HACK: Triggering `dtypes` meta-data computation in advance,\n            # so it won't affect the `loc/iloc` time:\n            self.indexer.dtypes", "min_run_count": 2, "name": "benchmarks.TimeIndexing.time_loc", "number": 0, "param_names": ["shape", "indexer_type"], "params": [["[5000, 5000]", "[1000000, 10]"], ["'bool_array'", "'bool_series'", "'scalar'", "'slice'", "'continuous_slice'", "'numpy_array_take_all_values'", "'python_list_take_10_values'", "'function'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2cf9698c1fee46f816cd1cd419f21bdee0a65689dd579e017af639ec46694863", "warmup_time": -1}, "benchmarks.TimeIndexingColumns.time___getitem__": {"code": "class TimeIndexingColumns:\n    def time___getitem__(self, shape):\n        execute(self.df[self.labels_indexer])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingColumns:\n    def setup(self, shape):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n        self.numeric_indexer = [0, 1]\n        self.labels_indexer = self.df.columns[self.numeric_indexer].tolist()", "min_run_count": 2, "name": "benchmarks.TimeIndexingColumns.time___getitem__", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "75a8ecc867ef0fe0ffa02f23ccf3c73bca21528b89bfc584afe02b58b4b67b8a", "warmup_time": -1}, "benchmarks.TimeIndexingColumns.time_iloc": {"code": "class TimeIndexingColumns:\n    def time_iloc(self, shape):\n        execute(self.df.iloc[:, self.numeric_indexer])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingColumns:\n    def setup(self, shape):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n        self.numeric_indexer = [0, 1]\n        self.labels_indexer = self.df.columns[self.numeric_indexer].tolist()", "min_run_count": 2, "name": "benchmarks.TimeIndexingColumns.time_iloc", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0d6ecb191a1cabeb650aa6efcae4ba81a5a930d6aef56d65762f9c39927f9c9e", "warmup_time": -1}, "benchmarks.TimeIndexingColumns.time_loc": {"code": "class TimeIndexingColumns:\n    def time_loc(self, shape):\n        execute(self.df.loc[:, self.labels_indexer])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingColumns:\n    def setup(self, shape):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n        self.numeric_indexer = [0, 1]\n        self.labels_indexer = self.df.columns[self.numeric_indexer].tolist()", "min_run_count": 2, "name": "benchmarks.TimeIndexingColumns.time_loc", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c7c0fd84bda010c668fb98ff22662f2330e0de9c8f05a5cbc9c28d55ca61cfff", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_getitem_array": {"code": "class TimeIndexingNumericSeries:\n    def time_getitem_array(self, shape, index, index_structure):\n        execute(self.data[self.array])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_getitem_array", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f803e75ac4521d67886eb86095fecd29d77f5fae699c2d617e7b8563de308121", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_getitem_list_like": {"code": "class TimeIndexingNumericSeries:\n    def time_getitem_list_like(self, shape, index, index_structure):\n        execute(self.data[[self.index_to_query]])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_getitem_list_like", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "26da39d1a81853e67e5f4b607175768b1bdc2569c6c0201c74cbe105cbf92df8", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_getitem_lists": {"code": "class TimeIndexingNumericSeries:\n    def time_getitem_lists(self, shape, index, index_structure):\n        execute(self.data[self.array_list])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_getitem_lists", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a6e9eef437105ddd6e706f4e3d8a191345770ceb3a5f8c870c9d667837cd4182", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_getitem_scalar": {"code": "class TimeIndexingNumericSeries:\n    def time_getitem_scalar(self, shape, index, index_structure):\n        # not calling execute as execute function fails for scalar\n        self.data[self.index_to_query]\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_getitem_scalar", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "95ebede2af65e9f362f0825c28b5d4b735962eb2ee47fcd069966569913ed84e", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_getitem_slice": {"code": "class TimeIndexingNumericSeries:\n    def time_getitem_slice(self, shape, index, index_structure):\n        execute(self.data[: self.index_to_query])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_getitem_slice", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "805faf9c8281540f36b9981891d4644a3c78cf4903a9c299f9413c35401053db", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_iloc_array": {"code": "class TimeIndexingNumericSeries:\n    def time_iloc_array(self, shape, index, index_structure):\n        execute(self.data.iloc[self.array])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_iloc_array", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a0941c973a470724de2294d999e7d1f296c15669e1388569425a68ee3a1a5df7", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_iloc_list_like": {"code": "class TimeIndexingNumericSeries:\n    def time_iloc_list_like(self, shape, index, index_structure):\n        execute(self.data.iloc[[self.index_to_query]])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_iloc_list_like", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5653d4b0747898788aa7de62ba54038ed67e9c72db80214f305faa6f3730dcf1", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_iloc_scalar": {"code": "class TimeIndexingNumericSeries:\n    def time_iloc_scalar(self, shape, index, index_structure):\n        # not calling execute as execute function fails for scalar\n        self.data.iloc[self.index_to_query]\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_iloc_scalar", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b5ab555f94ed58dae63b37699af2624e56ec9377414cced699c6e754afa607fb", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_iloc_slice": {"code": "class TimeIndexingNumericSeries:\n    def time_iloc_slice(self, shape, index, index_structure):\n        execute(self.data.iloc[: self.index_to_query])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_iloc_slice", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d2aba6c7e5393c8b8f96bd480aa03c8e04948a397932d2465c02de0e448a93b6", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_loc_array": {"code": "class TimeIndexingNumericSeries:\n    def time_loc_array(self, shape, index, index_structure):\n        execute(self.data.loc[self.array])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_loc_array", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6cf704634f4a86aac88d6b4f58f31ce98b2272157c8eb03282a15ce55645ffca", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_loc_list_like": {"code": "class TimeIndexingNumericSeries:\n    def time_loc_list_like(self, shape, index, index_structure):\n        execute(self.data.loc[[self.index_to_query]])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_loc_list_like", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bc25e647c81d68d2d2905ee6a40ad9e2c43dcde9de2fc8997919ea72bb3ce4af", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_loc_scalar": {"code": "class TimeIndexingNumericSeries:\n    def time_loc_scalar(self, shape, index, index_structure):\n        self.data.loc[self.index_to_query]\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_loc_scalar", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "95efa9333bb3b2c567ef9917011cf27240d4f55e10260cfa0c7799001b3b59b2", "warmup_time": -1}, "benchmarks.TimeIndexingNumericSeries.time_loc_slice": {"code": "class TimeIndexingNumericSeries:\n    def time_loc_slice(self, shape, index, index_structure):\n        execute(self.data.loc[: self.index_to_query])\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIndexingNumericSeries:\n    def setup(self, shape, dtype, index_structure):\n        N = shape[0]\n        indices = {\n            \"unique_monotonic_inc\": IMPL.Index(range(N), dtype=dtype),\n            \"nonunique_monotonic_inc\": IMPL.Index(\n                list(range(N // 100)) + [(N // 100) - 1] + list(range(N // 100, N - 1)),\n                dtype=dtype,\n            ),\n        }\n        self.data = IMPL.Series(np.random.rand(N), index=indices[index_structure])\n        self.array = np.arange(N // 2)\n        self.index_to_query = N // 2\n        self.array_list = self.array.tolist()\n        execute(self.data)", "min_run_count": 2, "name": "benchmarks.TimeIndexingNumericSeries.time_loc_slice", "number": 0, "param_names": ["shape", "dtype", "index_structure"], "params": [["[100000, 1]"], ["<class 'numpy.int64'>", "<class 'numpy.uint64'>", "<class 'numpy.float64'>"], ["'unique_monotonic_inc'", "'nonunique_monotonic_inc'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "69a04b3e51c478ebcd1bda1e548f320dc16dafb02031bf21cf5454fdfca1e35f", "warmup_time": -1}, "benchmarks.TimeInsert.time_insert_qc": {"code": "class TimeInsert:\n    def time_insert_qc(self, *args, **kwargs):\n        self.df.insert(loc=self.iloc, column=random_string(), value=self.item)\n        execute(self.df)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseTimeSetItem:\n    def setup(self, shape, item_length, loc, is_equal_indices):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH).copy()\n        self.loc, self.iloc = self.get_loc(\n            self.df, loc, item_length=item_length, axis=1\n        )\n    \n        self.item = self.df[self.loc] + 1\n        self.item_raw = self.item.to_numpy()\n        if not is_equal_indices:\n            self.item.index = reversed(self.item.index)", "min_run_count": 2, "name": "benchmarks.TimeInsert.time_insert_qc", "number": 0, "param_names": ["shape", "item_length", "loc", "is_equal_indices"], "params": [["[5000, 5000]", "[1000000, 10]"], ["1"], ["'zero'", "'middle'", "'last'"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "efde1dcfc7550816a958447a86066dcccd6e717e9de1df86264d091a835e2d4f", "warmup_time": -1}, "benchmarks.TimeInsert.time_insert_raw": {"code": "class TimeInsert:\n    def time_insert_raw(self, *args, **kwargs):\n        self.df.insert(loc=self.iloc, column=random_string(), value=self.item_raw)\n        execute(self.df)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseTimeSetItem:\n    def setup(self, shape, item_length, loc, is_equal_indices):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH).copy()\n        self.loc, self.iloc = self.get_loc(\n            self.df, loc, item_length=item_length, axis=1\n        )\n    \n        self.item = self.df[self.loc] + 1\n        self.item_raw = self.item.to_numpy()\n        if not is_equal_indices:\n            self.item.index = reversed(self.item.index)", "min_run_count": 2, "name": "benchmarks.TimeInsert.time_insert_raw", "number": 0, "param_names": ["shape", "item_length", "loc", "is_equal_indices"], "params": [["[5000, 5000]", "[1000000, 10]"], ["1"], ["'zero'", "'middle'", "'last'"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d1a063efea99ced99a5ef07138540c8bbc10f12e41576d87010e8d65d3354154", "warmup_time": -1}, "benchmarks.TimeIsnull.time_isnull": {"code": "class TimeIsnull:\n    def time_isnull(self, shape):\n        execute(IMPL.isnull(self.df))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeIsnull:\n    def setup(self, shape):\n        sample = np.array([np.nan, 1.0])\n        data = np.random.choice(sample, (shape[0], shape[1]))\n        self.df = IMPL.DataFrame(data)\n        execute(self.df)", "min_run_count": 2, "name": "benchmarks.TimeIsnull.time_isnull", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c555f8ce555705f7b1b85bc88460298b3ca6500159e9347a069cf26a3374e618", "warmup_time": -1}, "benchmarks.TimeJoin.time_join": {"code": "class TimeJoin:\n    def time_join(self, shapes, how, sort):\n        # join dataframes on index to get the predictable shape\n        execute(self.df1.join(self.df2, how=how, lsuffix=\"left_\", sort=sort))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeJoin:\n    def setup(self, shapes, how, sort):\n        self.df1 = generate_dataframe(\"int\", *shapes[0], RAND_LOW, RAND_HIGH)\n        self.df2 = generate_dataframe(\"int\", *shapes[1], RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeJoin.time_join", "number": 0, "param_names": ["shapes", "how", "sort"], "params": [["[[5000, 5000], [5000, 5000]]", "[[500000, 20], [1000000, 10]]"], ["'left'", "'inner'"], ["False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6334dd51c4b4303aa27abf1262bd0f093bc55e82e640e18652cf2540c757ebc7", "warmup_time": -1}, "benchmarks.TimeJoinStringIndex.time_join_dataframe_index_multi": {"code": "class TimeJoinStringIndex:\n    def time_join_dataframe_index_multi(self, shapes, sort):\n        execute(self.df.join(self.df_multi, on=[\"key1\", \"key2\"], sort=sort))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeJoinStringIndex:\n    def setup(self, shapes, sort):\n        assert shapes[0] % 100 == 0, \"implementation restriction\"\n        level1 = IMPL.Index([f\"i-{i}\" for i in range(10)], dtype=object).values\n        level2 = IMPL.Index(\n            [f\"i-{i}\" for i in range(shapes[0] // 100)], dtype=object\n        ).values\n        codes1 = np.arange(10).repeat(shapes[0] // 100)\n        codes2 = np.tile(np.arange(shapes[0] // 100), 10)\n        index2 = IMPL.MultiIndex(levels=[level1, level2], codes=[codes1, codes2])\n        self.df_multi = IMPL.DataFrame(\n            np.random.randn(len(index2), 4), index=index2, columns=[\"A\", \"B\", \"C\", \"D\"]\n        )\n    \n        self.key1 = np.tile(level1.take(codes1), 10)\n        self.key2 = np.tile(level2.take(codes2), 10)\n        self.df = generate_dataframe(\"int\", *shapes, RAND_LOW, RAND_HIGH)\n        # just to keep source shape\n        self.df = self.df.drop(columns=self.df.columns[-2:])\n        self.df[\"key1\"] = self.key1\n        self.df[\"key2\"] = self.key2\n        execute(self.df)\n    \n        self.df_key1 = IMPL.DataFrame(\n            np.random.randn(len(level1), 4), index=level1, columns=[\"A\", \"B\", \"C\", \"D\"]\n        )\n        self.df_key2 = IMPL.DataFrame(\n            np.random.randn(len(level2), 4), index=level2, columns=[\"A\", \"B\", \"C\", \"D\"]\n        )", "min_run_count": 2, "name": "benchmarks.TimeJoinStringIndex.time_join_dataframe_index_multi", "number": 0, "param_names": ["shapes", "sort"], "params": [["[100000, 64]"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "157b7a523f3debccb3616fbce46f1b9b2064e0b4729ee6942ced6a33bc0939c0", "warmup_time": -1}, "benchmarks.TimeJoinStringIndex.time_join_dataframe_index_single_key_bigger": {"code": "class TimeJoinStringIndex:\n    def time_join_dataframe_index_single_key_bigger(self, shapes, sort):\n        execute(self.df.join(self.df_key2, on=\"key2\", sort=sort))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeJoinStringIndex:\n    def setup(self, shapes, sort):\n        assert shapes[0] % 100 == 0, \"implementation restriction\"\n        level1 = IMPL.Index([f\"i-{i}\" for i in range(10)], dtype=object).values\n        level2 = IMPL.Index(\n            [f\"i-{i}\" for i in range(shapes[0] // 100)], dtype=object\n        ).values\n        codes1 = np.arange(10).repeat(shapes[0] // 100)\n        codes2 = np.tile(np.arange(shapes[0] // 100), 10)\n        index2 = IMPL.MultiIndex(levels=[level1, level2], codes=[codes1, codes2])\n        self.df_multi = IMPL.DataFrame(\n            np.random.randn(len(index2), 4), index=index2, columns=[\"A\", \"B\", \"C\", \"D\"]\n        )\n    \n        self.key1 = np.tile(level1.take(codes1), 10)\n        self.key2 = np.tile(level2.take(codes2), 10)\n        self.df = generate_dataframe(\"int\", *shapes, RAND_LOW, RAND_HIGH)\n        # just to keep source shape\n        self.df = self.df.drop(columns=self.df.columns[-2:])\n        self.df[\"key1\"] = self.key1\n        self.df[\"key2\"] = self.key2\n        execute(self.df)\n    \n        self.df_key1 = IMPL.DataFrame(\n            np.random.randn(len(level1), 4), index=level1, columns=[\"A\", \"B\", \"C\", \"D\"]\n        )\n        self.df_key2 = IMPL.DataFrame(\n            np.random.randn(len(level2), 4), index=level2, columns=[\"A\", \"B\", \"C\", \"D\"]\n        )", "min_run_count": 2, "name": "benchmarks.TimeJoinStringIndex.time_join_dataframe_index_single_key_bigger", "number": 0, "param_names": ["shapes", "sort"], "params": [["[100000, 64]"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e3edec87d54e556847b11cacdc6e9bc7015f1e9b4fb4d0c0e37bc1f46214cf10", "warmup_time": -1}, "benchmarks.TimeJoinStringIndex.time_join_dataframe_index_single_key_small": {"code": "class TimeJoinStringIndex:\n    def time_join_dataframe_index_single_key_small(self, shapes, sort):\n        execute(self.df.join(self.df_key1, on=\"key1\", sort=sort))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeJoinStringIndex:\n    def setup(self, shapes, sort):\n        assert shapes[0] % 100 == 0, \"implementation restriction\"\n        level1 = IMPL.Index([f\"i-{i}\" for i in range(10)], dtype=object).values\n        level2 = IMPL.Index(\n            [f\"i-{i}\" for i in range(shapes[0] // 100)], dtype=object\n        ).values\n        codes1 = np.arange(10).repeat(shapes[0] // 100)\n        codes2 = np.tile(np.arange(shapes[0] // 100), 10)\n        index2 = IMPL.MultiIndex(levels=[level1, level2], codes=[codes1, codes2])\n        self.df_multi = IMPL.DataFrame(\n            np.random.randn(len(index2), 4), index=index2, columns=[\"A\", \"B\", \"C\", \"D\"]\n        )\n    \n        self.key1 = np.tile(level1.take(codes1), 10)\n        self.key2 = np.tile(level2.take(codes2), 10)\n        self.df = generate_dataframe(\"int\", *shapes, RAND_LOW, RAND_HIGH)\n        # just to keep source shape\n        self.df = self.df.drop(columns=self.df.columns[-2:])\n        self.df[\"key1\"] = self.key1\n        self.df[\"key2\"] = self.key2\n        execute(self.df)\n    \n        self.df_key1 = IMPL.DataFrame(\n            np.random.randn(len(level1), 4), index=level1, columns=[\"A\", \"B\", \"C\", \"D\"]\n        )\n        self.df_key2 = IMPL.DataFrame(\n            np.random.randn(len(level2), 4), index=level2, columns=[\"A\", \"B\", \"C\", \"D\"]\n        )", "min_run_count": 2, "name": "benchmarks.TimeJoinStringIndex.time_join_dataframe_index_single_key_small", "number": 0, "param_names": ["shapes", "sort"], "params": [["[100000, 64]"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "432c54562645bfdb1579372ca34ce776f2abf3cff69c1246bff37bd24618e5eb", "warmup_time": -1}, "benchmarks.TimeLevelAlign.time_align_level": {"code": "class TimeLevelAlign:\n    def time_align_level(self, shapes):\n        left, right = self.df1.align(self.df2, level=1, copy=False)\n        execute(left), execute(right)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeLevelAlign:\n    def setup(self, shapes):\n        rows, cols = shapes[0]\n        rows_sqrt = round(math.sqrt(rows))\n        # the new number of rows may differ from the requested (slightly, so ok)\n        rows = rows_sqrt * rows_sqrt\n        self.index = IMPL.MultiIndex(\n            levels=[np.arange(10), np.arange(rows_sqrt), np.arange(rows_sqrt)],\n            codes=[\n                np.arange(10).repeat(rows),\n                np.tile(np.arange(rows_sqrt).repeat(rows_sqrt), 10),\n                np.tile(np.tile(np.arange(rows_sqrt), rows_sqrt), 10),\n            ],\n        )\n        self.df1 = IMPL.DataFrame(\n            np.random.randn(len(self.index), cols), index=self.index\n        )\n        self.df2 = IMPL.DataFrame(np.random.randn(*shapes[1]))\n        execute(self.df1), execute(self.df2)", "min_run_count": 2, "name": "benchmarks.TimeLevelAlign.time_align_level", "number": 0, "param_names": ["shapes"], "params": [["[[2500, 2500], [2500, 2500]]", "[[250000, 20], [500000, 10]]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9fdf3ba05fbf459a13567b6e5215a25a9a1da1f38b63de1ad03848cf0003cda7", "warmup_time": -1}, "benchmarks.TimeLevelAlign.time_reindex_level": {"code": "class TimeLevelAlign:\n    def time_reindex_level(self, shapes):\n        # `reindex` returns the same result here as `align`.\n        # Approximately the same performance is expected.\n        execute(self.df2.reindex(self.index, level=1))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeLevelAlign:\n    def setup(self, shapes):\n        rows, cols = shapes[0]\n        rows_sqrt = round(math.sqrt(rows))\n        # the new number of rows may differ from the requested (slightly, so ok)\n        rows = rows_sqrt * rows_sqrt\n        self.index = IMPL.MultiIndex(\n            levels=[np.arange(10), np.arange(rows_sqrt), np.arange(rows_sqrt)],\n            codes=[\n                np.arange(10).repeat(rows),\n                np.tile(np.arange(rows_sqrt).repeat(rows_sqrt), 10),\n                np.tile(np.tile(np.arange(rows_sqrt), rows_sqrt), 10),\n            ],\n        )\n        self.df1 = IMPL.DataFrame(\n            np.random.randn(len(self.index), cols), index=self.index\n        )\n        self.df2 = IMPL.DataFrame(np.random.randn(*shapes[1]))\n        execute(self.df1), execute(self.df2)", "min_run_count": 2, "name": "benchmarks.TimeLevelAlign.time_reindex_level", "number": 0, "param_names": ["shapes"], "params": [["[[2500, 2500], [2500, 2500]]", "[[250000, 20], [500000, 10]]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4563182535cc854923e92e8f96193a3d8078461fe13d681a81c9db355c3be627", "warmup_time": -1}, "benchmarks.TimeMaskBool.time_frame_mask": {"code": "class TimeMaskBool:\n    def time_frame_mask(self, shape):\n        execute(self.df.mask(self.mask))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeMaskBool:\n    def setup(self, shape):\n        self.df = IMPL.DataFrame(np.random.randn(*shape))\n        self.mask = self.df < 0\n        execute(self.df), execute(self.mask)", "min_run_count": 2, "name": "benchmarks.TimeMaskBool.time_frame_mask", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ce6a0113669d66ea945a752479d180e5dae9f01485ee5137cfadd76e7b9e77b6", "warmup_time": -1}, "benchmarks.TimeMerge.time_merge": {"code": "class TimeMerge:\n    def time_merge(self, shapes, how, sort):\n        # merge dataframes by index to get the predictable shape\n        execute(\n            self.df1.merge(\n                self.df2, left_index=True, right_index=True, how=how, sort=sort\n            )\n        )\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeMerge:\n    def setup(self, shapes, how, sort):\n        self.df1 = generate_dataframe(\"int\", *shapes[0], RAND_LOW, RAND_HIGH)\n        self.df2 = generate_dataframe(\"int\", *shapes[1], RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeMerge.time_merge", "number": 0, "param_names": ["shapes", "how", "sort"], "params": [["[[5000, 5000], [5000, 5000]]", "[[500000, 20], [1000000, 10]]"], ["'left'", "'inner'"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f340183c55c0881806068caf5ff2b9125cba5f00a33ce66e05a195d57aa9927b", "warmup_time": -1}, "benchmarks.TimeMerge.time_merge_dataframe_empty_left": {"code": "class TimeMerge:\n    def time_merge_dataframe_empty_left(self, shapes, how, sort):\n        # Getting an empty dataframe using `iloc` should be very fast,\n        # so the impact on the time of the merge operation should be negligible.\n        execute(IMPL.merge(self.df1.iloc[:0], self.df2, how=how, sort=sort))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeMerge:\n    def setup(self, shapes, how, sort):\n        self.df1 = generate_dataframe(\"int\", *shapes[0], RAND_LOW, RAND_HIGH)\n        self.df2 = generate_dataframe(\"int\", *shapes[1], RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeMerge.time_merge_dataframe_empty_left", "number": 0, "param_names": ["shapes", "how", "sort"], "params": [["[[5000, 5000], [5000, 5000]]", "[[500000, 20], [1000000, 10]]"], ["'left'", "'inner'"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "da11aa6421817dca2f5a97f7a720b8e3beed3b8226e6dc8d2ec80f173c82d041", "warmup_time": -1}, "benchmarks.TimeMerge.time_merge_dataframe_empty_right": {"code": "class TimeMerge:\n    def time_merge_dataframe_empty_right(self, shapes, how, sort):\n        # Getting an empty dataframe using `iloc` should be very fast,\n        # so the impact on the time of the merge operation should be negligible.\n        execute(IMPL.merge(self.df1, self.df2.iloc[:0], how=how, sort=sort))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeMerge:\n    def setup(self, shapes, how, sort):\n        self.df1 = generate_dataframe(\"int\", *shapes[0], RAND_LOW, RAND_HIGH)\n        self.df2 = generate_dataframe(\"int\", *shapes[1], RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeMerge.time_merge_dataframe_empty_right", "number": 0, "param_names": ["shapes", "how", "sort"], "params": [["[[5000, 5000], [5000, 5000]]", "[[500000, 20], [1000000, 10]]"], ["'left'", "'inner'"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1cf28ad4faba42a0109fc07aa20eaba5f169eddf58b0f2d3482b9f00b8ea0bfc", "warmup_time": -1}, "benchmarks.TimeMergeCategoricals.time_merge_categoricals": {"code": "class TimeMergeCategoricals:\n    def time_merge_categoricals(self, shapes, data_type):\n        execute(IMPL.merge(self.left, self.right, on=\"X\"))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeMergeCategoricals:\n    def setup(self, shapes, data_type):\n        assert len(shapes) == 2\n        assert shapes[1] == 2\n        size = (shapes[0],)\n        self.left = IMPL.DataFrame(\n            {\n                \"X\": np.random.choice(range(0, 10), size=size),\n                \"Y\": np.random.choice([\"one\", \"two\", \"three\"], size=size),\n            }\n        )\n    \n        self.right = IMPL.DataFrame(\n            {\n                \"X\": np.random.choice(range(0, 10), size=size),\n                \"Z\": np.random.choice([\"jjj\", \"kkk\", \"sss\"], size=size),\n            }\n        )\n    \n        if data_type == \"category\":\n            self.left = self.left.assign(Y=self.left[\"Y\"].astype(\"category\"))\n            execute(self.left)\n            self.right = self.right.assign(Z=self.right[\"Z\"].astype(\"category\"))\n            execute(self.right)", "min_run_count": 2, "name": "benchmarks.TimeMergeCategoricals.time_merge_categoricals", "number": 0, "param_names": ["shapes", "data_type"], "params": [["[10000, 2]"], ["'object'", "'category'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "de7ab8fa098db7e2c3b0c10a03c76e90ebeccf73adab2d10f1551b37a18749cc", "warmup_time": -1}, "benchmarks.TimeMergeDefault.time_merge": {"code": "class TimeMergeDefault:\n    def time_merge(self, shapes, how, sort):\n        execute(IMPL.merge(self.df1, self.df2, how=how, sort=sort))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeMergeDefault:\n    def setup(self, shapes, how, sort):\n        self.df1 = generate_dataframe(\"int\", *shapes[0], RAND_LOW, RAND_HIGH)\n        self.df2 = generate_dataframe(\"int\", *shapes[1], RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeMergeDefault.time_merge", "number": 0, "param_names": ["shapes", "how", "sort"], "params": [["[[1000, 1000], [1000, 1000]]", "[[500000, 20], [1000000, 10]]"], ["'left'", "'inner'"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "db2037b63b97aa8cbfc60027ac8f947eef9800c3ec05270be0143c605c403d94", "warmup_time": -1}, "benchmarks.TimeMultiIndexing.time_multiindex_loc": {"code": "class TimeMultiIndexing:\n    def time_multiindex_loc(self, shape):\n        execute(\n            self.df.loc[\n                self.df.index[2] : self.df.index[-2],\n                self.df.columns[2] : self.df.columns[-2],\n            ]\n        )\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeMultiIndexing:\n    def setup(self, shape):\n        df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n    \n        index = IMPL.MultiIndex.from_product(\n            [df.index[: shape[0] // 2], [\"bar\", \"foo\"]]\n        )\n        columns = IMPL.MultiIndex.from_product(\n            [df.columns[: shape[1] // 2], [\"buz\", \"fuz\"]]\n        )\n    \n        df.index = index\n        df.columns = columns\n    \n        self.df = df.sort_index(axis=1)", "min_run_count": 2, "name": "benchmarks.TimeMultiIndexing.time_multiindex_loc", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "db85337f27c6ed48b8913e190afd398789259f297e75efd56cf5fb4590a5ce19", "warmup_time": -1}, "benchmarks.TimeProperties.time_columns": {"code": "class TimeProperties:\n    def time_columns(self, shape):\n        return self.df.columns\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeProperties:\n    def setup(self, shape):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeProperties.time_columns", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a3174663e00a84cda15107825cc22135289558b7ac2de97cbf8626af5c08a7c3", "warmup_time": -1}, "benchmarks.TimeProperties.time_index": {"code": "class TimeProperties:\n    def time_index(self, shape):\n        return self.df.index\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeProperties:\n    def setup(self, shape):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeProperties.time_index", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "334d42afec2065a0ac7351566fba85775cf3c13cf7bd70c3525bdbbf6641acb4", "warmup_time": -1}, "benchmarks.TimeProperties.time_shape": {"code": "class TimeProperties:\n    def time_shape(self, shape):\n        return self.df.shape\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeProperties:\n    def setup(self, shape):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)", "min_run_count": 2, "name": "benchmarks.TimeProperties.time_shape", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "835d326a5a42748b739c20db4dd983cbf1e8996ab2b8bff3d3e5709a5a548e90", "warmup_time": -1}, "benchmarks.TimeReindex.time_reindex_columns": {"code": "class TimeReindex:\n    def time_reindex_columns(self, shape):\n        execute(self.df2.reindex(columns=self.df.columns[1:5]))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeReindex:\n    def setup(self, shape):\n        rows, cols = shape\n        rng = IMPL.date_range(start=\"1/1/1970\", periods=rows, freq=\"1min\")\n        self.df = IMPL.DataFrame(\n            np.random.rand(rows, cols), index=rng, columns=range(cols)\n        )\n        self.df[\"foo\"] = \"bar\"\n        self.rng_subset = IMPL.Index(rng[::2])\n        self.df2 = IMPL.DataFrame(\n            index=range(rows), data=np.random.rand(rows, cols), columns=range(cols)\n        )\n        level1 = IMPL.Index(\n            [f\"i-{i}\" for i in range(rows // 10)], dtype=object\n        ).values.repeat(10)\n        level2 = np.tile(\n            IMPL.Index([f\"i-{i}\" for i in range(10)], dtype=object).values, rows // 10\n        )\n        index = IMPL.MultiIndex.from_arrays([level1, level2])\n        self.s = IMPL.Series(np.random.randn(rows), index=index)\n        self.s_subset = self.s[::2]\n        self.s_subset_no_cache = self.s[::2].copy()\n    \n        mi = IMPL.MultiIndex.from_product([rng[: len(rng) // 10], range(10)])\n        self.s2 = IMPL.Series(np.random.randn(len(mi)), index=mi)\n        self.s2_subset = self.s2[::2].copy()\n        execute(self.df), execute(self.df2)\n        execute(self.s), execute(self.s_subset)\n        execute(self.s2), execute(self.s2_subset)\n        execute(self.s_subset_no_cache)", "min_run_count": 2, "name": "benchmarks.TimeReindex.time_reindex_columns", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3248cde3d66ea8dbcf7a98f076ac98697ae32831a4d43f676912cc8a8343efef", "warmup_time": -1}, "benchmarks.TimeReindex.time_reindex_dates": {"code": "class TimeReindex:\n    def time_reindex_dates(self, shape):\n        execute(self.df.reindex(self.rng_subset))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeReindex:\n    def setup(self, shape):\n        rows, cols = shape\n        rng = IMPL.date_range(start=\"1/1/1970\", periods=rows, freq=\"1min\")\n        self.df = IMPL.DataFrame(\n            np.random.rand(rows, cols), index=rng, columns=range(cols)\n        )\n        self.df[\"foo\"] = \"bar\"\n        self.rng_subset = IMPL.Index(rng[::2])\n        self.df2 = IMPL.DataFrame(\n            index=range(rows), data=np.random.rand(rows, cols), columns=range(cols)\n        )\n        level1 = IMPL.Index(\n            [f\"i-{i}\" for i in range(rows // 10)], dtype=object\n        ).values.repeat(10)\n        level2 = np.tile(\n            IMPL.Index([f\"i-{i}\" for i in range(10)], dtype=object).values, rows // 10\n        )\n        index = IMPL.MultiIndex.from_arrays([level1, level2])\n        self.s = IMPL.Series(np.random.randn(rows), index=index)\n        self.s_subset = self.s[::2]\n        self.s_subset_no_cache = self.s[::2].copy()\n    \n        mi = IMPL.MultiIndex.from_product([rng[: len(rng) // 10], range(10)])\n        self.s2 = IMPL.Series(np.random.randn(len(mi)), index=mi)\n        self.s2_subset = self.s2[::2].copy()\n        execute(self.df), execute(self.df2)\n        execute(self.s), execute(self.s_subset)\n        execute(self.s2), execute(self.s2_subset)\n        execute(self.s_subset_no_cache)", "min_run_count": 2, "name": "benchmarks.TimeReindex.time_reindex_dates", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c4702192a15b6c21a57cdc138edb943374ebfe1641b13adefab6cdddc1c8aca3", "warmup_time": -1}, "benchmarks.TimeReindex.time_reindex_multiindex_no_cache": {"code": "class TimeReindex:\n    def time_reindex_multiindex_no_cache(self, shape):\n        # Copy to avoid MultiIndex._values getting cached (pandas specific)\n        execute(self.s.reindex(self.s_subset_no_cache.index.copy()))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeReindex:\n    def setup(self, shape):\n        rows, cols = shape\n        rng = IMPL.date_range(start=\"1/1/1970\", periods=rows, freq=\"1min\")\n        self.df = IMPL.DataFrame(\n            np.random.rand(rows, cols), index=rng, columns=range(cols)\n        )\n        self.df[\"foo\"] = \"bar\"\n        self.rng_subset = IMPL.Index(rng[::2])\n        self.df2 = IMPL.DataFrame(\n            index=range(rows), data=np.random.rand(rows, cols), columns=range(cols)\n        )\n        level1 = IMPL.Index(\n            [f\"i-{i}\" for i in range(rows // 10)], dtype=object\n        ).values.repeat(10)\n        level2 = np.tile(\n            IMPL.Index([f\"i-{i}\" for i in range(10)], dtype=object).values, rows // 10\n        )\n        index = IMPL.MultiIndex.from_arrays([level1, level2])\n        self.s = IMPL.Series(np.random.randn(rows), index=index)\n        self.s_subset = self.s[::2]\n        self.s_subset_no_cache = self.s[::2].copy()\n    \n        mi = IMPL.MultiIndex.from_product([rng[: len(rng) // 10], range(10)])\n        self.s2 = IMPL.Series(np.random.randn(len(mi)), index=mi)\n        self.s2_subset = self.s2[::2].copy()\n        execute(self.df), execute(self.df2)\n        execute(self.s), execute(self.s_subset)\n        execute(self.s2), execute(self.s2_subset)\n        execute(self.s_subset_no_cache)", "min_run_count": 2, "name": "benchmarks.TimeReindex.time_reindex_multiindex_no_cache", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "481614c2cf40055621964fc53cb3f4a84dbac500a30e0e3b4be34bd02e663678", "warmup_time": -1}, "benchmarks.TimeReindex.time_reindex_multiindex_no_cache_dates": {"code": "class TimeReindex:\n    def time_reindex_multiindex_no_cache_dates(self, shape):\n        # Copy to avoid MultiIndex._values getting cached (pandas specific)\n        execute(self.s2_subset.reindex(self.s2.index.copy()))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeReindex:\n    def setup(self, shape):\n        rows, cols = shape\n        rng = IMPL.date_range(start=\"1/1/1970\", periods=rows, freq=\"1min\")\n        self.df = IMPL.DataFrame(\n            np.random.rand(rows, cols), index=rng, columns=range(cols)\n        )\n        self.df[\"foo\"] = \"bar\"\n        self.rng_subset = IMPL.Index(rng[::2])\n        self.df2 = IMPL.DataFrame(\n            index=range(rows), data=np.random.rand(rows, cols), columns=range(cols)\n        )\n        level1 = IMPL.Index(\n            [f\"i-{i}\" for i in range(rows // 10)], dtype=object\n        ).values.repeat(10)\n        level2 = np.tile(\n            IMPL.Index([f\"i-{i}\" for i in range(10)], dtype=object).values, rows // 10\n        )\n        index = IMPL.MultiIndex.from_arrays([level1, level2])\n        self.s = IMPL.Series(np.random.randn(rows), index=index)\n        self.s_subset = self.s[::2]\n        self.s_subset_no_cache = self.s[::2].copy()\n    \n        mi = IMPL.MultiIndex.from_product([rng[: len(rng) // 10], range(10)])\n        self.s2 = IMPL.Series(np.random.randn(len(mi)), index=mi)\n        self.s2_subset = self.s2[::2].copy()\n        execute(self.df), execute(self.df2)\n        execute(self.s), execute(self.s_subset)\n        execute(self.s2), execute(self.s2_subset)\n        execute(self.s_subset_no_cache)", "min_run_count": 2, "name": "benchmarks.TimeReindex.time_reindex_multiindex_no_cache_dates", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b769ef5ea3cb5573a2bd3a1c9b7392b0f1336903e9d81b8dcbf8d3e63199584a", "warmup_time": -1}, "benchmarks.TimeReindex.time_reindex_multiindex_with_cache": {"code": "class TimeReindex:\n    def time_reindex_multiindex_with_cache(self, shape):\n        # MultiIndex._values gets cached (pandas specific)\n        execute(self.s.reindex(self.s_subset.index))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeReindex:\n    def setup(self, shape):\n        rows, cols = shape\n        rng = IMPL.date_range(start=\"1/1/1970\", periods=rows, freq=\"1min\")\n        self.df = IMPL.DataFrame(\n            np.random.rand(rows, cols), index=rng, columns=range(cols)\n        )\n        self.df[\"foo\"] = \"bar\"\n        self.rng_subset = IMPL.Index(rng[::2])\n        self.df2 = IMPL.DataFrame(\n            index=range(rows), data=np.random.rand(rows, cols), columns=range(cols)\n        )\n        level1 = IMPL.Index(\n            [f\"i-{i}\" for i in range(rows // 10)], dtype=object\n        ).values.repeat(10)\n        level2 = np.tile(\n            IMPL.Index([f\"i-{i}\" for i in range(10)], dtype=object).values, rows // 10\n        )\n        index = IMPL.MultiIndex.from_arrays([level1, level2])\n        self.s = IMPL.Series(np.random.randn(rows), index=index)\n        self.s_subset = self.s[::2]\n        self.s_subset_no_cache = self.s[::2].copy()\n    \n        mi = IMPL.MultiIndex.from_product([rng[: len(rng) // 10], range(10)])\n        self.s2 = IMPL.Series(np.random.randn(len(mi)), index=mi)\n        self.s2_subset = self.s2[::2].copy()\n        execute(self.df), execute(self.df2)\n        execute(self.s), execute(self.s_subset)\n        execute(self.s2), execute(self.s2_subset)\n        execute(self.s_subset_no_cache)", "min_run_count": 2, "name": "benchmarks.TimeReindex.time_reindex_multiindex_with_cache", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bc035c266a7901cbb7039f1ee894e46e43c14043dfdb314f27ae218a10869955", "warmup_time": -1}, "benchmarks.TimeReindexMethod.time_reindex_method": {"code": "class TimeReindexMethod:\n    def time_reindex_method(self, shape, method, constructor):\n        execute(self.ts.reindex(self.idx, method=method))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeReindexMethod:\n    def setup(self, shape, method, constructor):\n        N = shape[0]\n        self.idx = constructor(\"1/1/2000\", periods=N, freq=\"1min\")\n        self.ts = IMPL.Series(np.random.randn(N), index=self.idx)[::2]\n        execute(self.ts)", "min_run_count": 2, "name": "benchmarks.TimeReindexMethod.time_reindex_method", "number": 0, "param_names": ["shape", "method", "constructor"], "params": [["[5000, 5000]", "[1000000, 10]"], ["'pad'", "'backfill'"], ["<function date_range>", "<function period_range>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a85eb27dbaec41ac2e57df3941ef6147a8a6c8d7e47e8470ab33420cda35dcc8", "warmup_time": -1}, "benchmarks.TimeRemoveCategories.time_remove_categories": {"code": "class TimeRemoveCategories:\n    def time_remove_categories(self, shape):\n        execute(self.ts.cat.remove_categories(self.ts.cat.categories[::2]))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseCategories:\n    def setup(self, shape):\n        rows = shape[0]\n        arr = [f\"s{i:04d}\" for i in np.random.randint(0, rows // 10, size=rows)]\n        self.ts = IMPL.Series(arr).astype(\"category\")\n        execute(self.ts)", "min_run_count": 2, "name": "benchmarks.TimeRemoveCategories.time_remove_categories", "number": 0, "param_names": ["shape"], "params": [["[100000, 1]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "32ed06594a8f002224167ccf02375a2b743a5f09cd19558f138693c5de367252", "warmup_time": -1}, "benchmarks.TimeReplace.time_replace": {"code": "class TimeReplace:\n    def time_replace(self, shape):\n        execute(self.df.replace(self.to_replace))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeReplace:\n    def setup(self, shape):\n        rows, cols = shape\n        self.to_replace = {i: getattr(IMPL, \"Timestamp\")(i) for i in range(rows)}\n        self.df = IMPL.DataFrame(np.random.randint(rows, size=(rows, cols)))\n        execute(self.df)", "min_run_count": 2, "name": "benchmarks.TimeReplace.time_replace", "number": 0, "param_names": ["shape"], "params": [["[10000, 2]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "45ab10af4bc620f4b44f4821fa6a7fa3a51252402e5ca2837986dc48c916433e", "warmup_time": -1}, "benchmarks.TimeRepr.time_repr": {"code": "class TimeRepr:\n    def time_repr(self, shape):\n        repr(self.df)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeRepr:\n    def setup(self, shape):\n        self.df = IMPL.DataFrame(np.random.randn(*shape))\n        execute(self.df)", "min_run_count": 2, "name": "benchmarks.TimeRepr.time_repr", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5a304b0674995b844a4386b5c4e662aa5844ed39c14b9b7ececcb2b41503663e", "warmup_time": -1}, "benchmarks.TimeResetIndex.time_reset_index": {"code": "class TimeResetIndex:\n    def time_reset_index(self, shape, drop, level):\n        execute(self.df.reset_index(drop=drop, level=level))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeResetIndex:\n    def setup(self, shape, drop, level):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n    \n        if level:\n            index = IMPL.MultiIndex.from_product(\n                [self.df.index[: shape[0] // 2], [\"bar\", \"foo\"]],\n                names=[\"level_1\", \"level_2\"],\n            )\n            self.df.index = index", "min_run_count": 2, "name": "benchmarks.TimeResetIndex.time_reset_index", "number": 0, "param_names": ["shape", "drop", "level"], "params": [["[5000, 5000]", "[1000000, 10]"], ["False", "True"], ["None", "'level_1'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f1f536693a3ef307abe578e7b471baba7478ef4fe7c646fe3bc5538a5d222b2a", "warmup_time": -1}, "benchmarks.TimeSetCategories.time_set_categories": {"code": "class TimeSetCategories:\n    def time_set_categories(self, shape):\n        execute(self.ts.cat.set_categories(self.ts.cat.categories[::2]))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseCategories:\n    def setup(self, shape):\n        rows = shape[0]\n        arr = [f\"s{i:04d}\" for i in np.random.randint(0, rows // 10, size=rows)]\n        self.ts = IMPL.Series(arr).astype(\"category\")\n        execute(self.ts)", "min_run_count": 2, "name": "benchmarks.TimeSetCategories.time_set_categories", "number": 0, "param_names": ["shape"], "params": [["[100000, 1]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "918fa90450e704ce177a50063e3eb5bfc853e0f5594ed72fb9ffb01ca51b634b", "warmup_time": -1}, "benchmarks.TimeSetItem.time_setitem_qc": {"code": "class TimeSetItem:\n    def time_setitem_qc(self, *args, **kwargs):\n        self.df[self.loc] = self.item\n        execute(self.df)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseTimeSetItem:\n    def setup(self, shape, item_length, loc, is_equal_indices):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH).copy()\n        self.loc, self.iloc = self.get_loc(\n            self.df, loc, item_length=item_length, axis=1\n        )\n    \n        self.item = self.df[self.loc] + 1\n        self.item_raw = self.item.to_numpy()\n        if not is_equal_indices:\n            self.item.index = reversed(self.item.index)", "min_run_count": 2, "name": "benchmarks.TimeSetItem.time_setitem_qc", "number": 0, "param_names": ["shape", "item_length", "loc", "is_equal_indices"], "params": [["[5000, 5000]", "[1000000, 10]"], ["1"], ["'zero'", "'middle'", "'last'"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6b2bea3379e0d914facea807c4c1b5c54e9ff88b32a81519320f8ae4daeccd34", "warmup_time": -1}, "benchmarks.TimeSetItem.time_setitem_raw": {"code": "class TimeSetItem:\n    def time_setitem_raw(self, *args, **kwargs):\n        self.df[self.loc] = self.item_raw\n        execute(self.df)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseTimeSetItem:\n    def setup(self, shape, item_length, loc, is_equal_indices):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH).copy()\n        self.loc, self.iloc = self.get_loc(\n            self.df, loc, item_length=item_length, axis=1\n        )\n    \n        self.item = self.df[self.loc] + 1\n        self.item_raw = self.item.to_numpy()\n        if not is_equal_indices:\n            self.item.index = reversed(self.item.index)", "min_run_count": 2, "name": "benchmarks.TimeSetItem.time_setitem_raw", "number": 0, "param_names": ["shape", "item_length", "loc", "is_equal_indices"], "params": [["[5000, 5000]", "[1000000, 10]"], ["1"], ["'zero'", "'middle'", "'last'"], ["True", "False"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e5e91c4f305b997c85df44f71e55276f90aff058d5bb962f56ae456a063ade2d", "warmup_time": -1}, "benchmarks.TimeSortValues.time_sort_values": {"code": "class TimeSortValues:\n    def time_sort_values(self, shape, columns_number, ascending_list):\n        execute(self.df.sort_values(self.columns, ascending=self.ascending))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeSortValues:\n    def setup(self, shape, columns_number, ascending_list):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n        self.columns = random_columns(self.df.columns, columns_number)\n        self.ascending = (\n            random_booleans(columns_number)\n            if ascending_list\n            else bool(random_booleans(1)[0])\n        )", "min_run_count": 2, "name": "benchmarks.TimeSortValues.time_sort_values", "number": 0, "param_names": ["shape", "columns_number", "ascending_list"], "params": [["[5000, 5000]", "[1000000, 10]"], ["1", "2", "10", "100"], ["False", "True"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4151dad779d1ec88a410642a779a3319c5be6efd3c7c7e7f4db0d856d5299cf1", "warmup_time": -1}, "benchmarks.TimeStack.time_stack": {"code": "class TimeStack:\n    def time_stack(self, shape):\n        execute(self.udf.stack())\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeStack:\n    def setup(self, shape):\n        super().setup(shape)\n        self.udf = self.df.unstack(1)\n        execute(self.udf)", "min_run_count": 2, "name": "benchmarks.TimeStack.time_stack", "number": 0, "param_names": ["shape"], "params": [["[1500, 1500]", "[100000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4d4d65fc0a3a1a396fc68ca4aa7672392b2c96ec009baad399b1fc88912e09de", "warmup_time": -1}, "benchmarks.TimeTail.time_tail": {"code": "class TimeTail:\n    def time_tail(self, shape, tail_count):\n        execute(self.df.tail(self.tail_count))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeTail:\n    def setup(self, shape, tail_count):\n        self.df = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH)\n        self.tail_count = (\n            int(tail_count * len(self.df.index))\n            if isinstance(tail_count, float)\n            else tail_count\n        )", "min_run_count": 2, "name": "benchmarks.TimeTail.time_tail", "number": 0, "param_names": ["shape", "tail_count"], "params": [["[5000, 5000]", "[1000000, 10]"], ["5", "0.8"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3fc2ca0189a263deb96bc65c86201648d3c88ad1535fb4f98c01ab99bc5b42c9", "warmup_time": -1}, "benchmarks.TimeUnstack.time_unstack": {"code": "class TimeUnstack:\n    def time_unstack(self, shape):\n        execute(self.df.unstack(1))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseReshape:\n    def setup(self, shape):\n        rows, cols = shape\n        k = 10\n        arrays = [\n            np.arange(rows // k).repeat(k),\n            np.roll(np.tile(np.arange(rows // k), k), 25),\n        ]\n        index = IMPL.MultiIndex.from_arrays(arrays)\n        self.df = IMPL.DataFrame(np.random.randn(rows, cols), index=index)\n        execute(self.df)", "min_run_count": 2, "name": "benchmarks.TimeUnstack.time_unstack", "number": 0, "param_names": ["shape"], "params": [["[1500, 1500]", "[100000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c6f7c763b39023bdcf126f28392b104717c37a5c586aa727879102c452bedd26", "warmup_time": -1}, "benchmarks.TimeValueCountsFrame.time_value_counts": {"code": "class TimeValueCountsFrame:\n    def time_value_counts(self, *args, **kwargs):\n        execute(self.df.value_counts(subset=self.subset))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseTimeValueCounts:\n    def setup(self, shape, ngroups=5, subset=1):\n        ngroups = translator_groupby_ngroups(ngroups, shape)\n        self.df, self.subset = generate_dataframe(\n            \"int\",\n            *shape,\n            RAND_LOW,\n            RAND_HIGH,\n            groupby_ncols=subset,\n            count_groups=ngroups,\n        )", "min_run_count": 2, "name": "benchmarks.TimeValueCountsFrame.time_value_counts", "number": 0, "param_names": ["shape", "ngroups", "subset"], "params": [["[5000, 5000]", "[1000000, 10]"], ["100", "'huge_amount_groups'"], ["2", "10"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "afe793f7e5c1c1135b4ffa9a87130fe0afb5a23f4a3914765bb64c92ecc1b171", "warmup_time": -1}, "benchmarks.TimeValueCountsSeries.time_value_counts": {"code": "class TimeValueCountsSeries:\n    def time_value_counts(self, shape, ngroups, bins):\n        execute(self.df.value_counts(bins=bins))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeValueCountsSeries:\n    def setup(self, shape, ngroups, bins):\n        super().setup(ngroups=ngroups, shape=shape)\n        self.df = self.df[self.subset[0]]", "min_run_count": 2, "name": "benchmarks.TimeValueCountsSeries.time_value_counts", "number": 0, "param_names": ["shape", "ngroups", "bins"], "params": [["[5000, 5000]", "[1000000, 10]"], ["100", "'huge_amount_groups'"], ["None", "3"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "91e55f80ee2b104afa9f4f5b0c4b8704371280dee0f720f23f864eb93d443544", "warmup_time": -1}, "io.csv.TimeReadCsvNamesDtype.time_read_csv_names_dtype": {"code": "class TimeReadCsvNamesDtype:\n    def time_read_csv_names_dtype(self, cache, shape, names, dtype):\n        execute(\n            IMPL.read_csv(\n                self.filename,\n                names=self.names,\n                header=0,\n                dtype=self.dtype,\n                parse_dates=self.parse_dates,\n            )\n        )\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeReadCsvNamesDtype:\n    def setup(self, cache, shape, names, dtype):\n        # ray init\n        if ASV_USE_IMPL == \"modin\":\n            IMPL.DataFrame([])\n        file_id = self._get_file_id(shape, dtype)\n        self.filename, self.names, self.dtype = cache[file_id]\n    \n        self.parse_dates = None\n        if dtype == \"Int64_Timestamp\":\n            # cached version of dtype should not change\n            self.dtype = self.dtype.copy()\n            for col in self._timestamp_columns:\n                del self.dtype[col]\n            self.parse_dates = self._timestamp_columns\n\n    def setup_cache(self, test_filename=\"io_test_file_csv_names_dtype\"):\n        # filenames with a metadata of saved dataframes\n        cache = {}\n        for shape in self.shapes:\n            for dtype in self._dtypes_params:\n                df = generate_dataframe(\n                    \"int\", *shape, RAND_LOW, RAND_HIGH, impl=\"pandas\"\n                )\n                if dtype == \"Int64_Timestamp\":\n                    df = self._add_timestamp_columns(df)\n    \n                file_id = self._get_file_id(shape, dtype)\n                cache[file_id] = (\n                    f\"{test_filename}_{file_id}.csv\",\n                    df.columns.to_list(),\n                    df.dtypes.to_dict(),\n                )\n                df.to_csv(cache[file_id][0], index=False)\n        return cache", "min_run_count": 2, "name": "io.csv.TimeReadCsvNamesDtype.time_read_csv_names_dtype", "number": 0, "param_names": ["shape", "names", "dtype"], "params": [["[5000, 5000]", "[1000000, 10]"], ["'array-like'"], ["'Int64'", "'Int64_Timestamp'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "io.csv:105", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5f57e0f0d83d6b0a2d773a9bf6fea419365945008c417adca4f55f260f01c87a", "warmup_time": -1}, "io.csv.TimeReadCsvSkiprows.time_skiprows": {"code": "class TimeReadCsvSkiprows:\n    def time_skiprows(self, test_filenames, shape, skiprows):\n        execute(IMPL.read_csv(test_filenames[self.shape_id], skiprows=self.skiprows))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeReadCsvSkiprows:\n    def setup(self, test_filenames, shape, skiprows):\n        super().setup(test_filenames, shape, skiprows)\n        self.skiprows = self.skiprows_mapping[skiprows] if skiprows else None\n\nclass BaseReadCsv:\n    def setup_cache(self, test_filename=\"io_test_file\"):\n        test_filenames = prepare_io_data(\n            test_filename, self.data_type, get_benchmark_shapes(self.__class__.__name__)\n        )\n        return test_filenames", "min_run_count": 2, "name": "io.csv.TimeReadCsvSkiprows.time_skiprows", "number": 0, "param_names": ["shape", "skiprows"], "params": [["[5000, 5000]", "[1000000, 10]"], ["None", "'lambda_even_rows'", "'range_uniform'", "'range_step2'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "io.csv:31", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6206ec5eac92df41ca0ee650780a2b3c8e4f3aa5c588f17526f1db5e14c2183d", "warmup_time": -1}, "io.csv.TimeReadCsvTrueFalseValues.time_true_false_values": {"code": "class TimeReadCsvTrueFalseValues:\n    def time_true_false_values(self, test_filenames, shape):\n        execute(\n            IMPL.read_csv(\n                test_filenames[self.shape_id],\n                true_values=[\"Yes\", \"true\"],\n                false_values=[\"No\", \"false\"],\n            ),\n        )\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass BaseReadCsv:\n    def setup(self, test_filenames, shape, *args, **kwargs):\n        # ray init\n        if ASV_USE_IMPL == \"modin\":\n            IMPL.DataFrame([])\n        self.shape_id = get_shape_id(shape)\n\n    def setup_cache(self, test_filename=\"io_test_file\"):\n        test_filenames = prepare_io_data(\n            test_filename, self.data_type, get_benchmark_shapes(self.__class__.__name__)\n        )\n        return test_filenames", "min_run_count": 2, "name": "io.csv.TimeReadCsvTrueFalseValues.time_true_false_values", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "io.csv:31", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "01ae00c9c4c19578e420dc248dc4f794eb3ac703341b37687323f13eb4a133a4", "warmup_time": -1}, "io.parquet.TimeReadParquet.time_read_parquet": {"code": "class TimeReadParquet:\n    def time_read_parquet(self, test_filenames, shape):\n        execute(\n            IMPL.read_parquet(\n                test_filenames[self.shape_id],\n            )\n        )\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeReadParquet:\n    def setup(self, test_filenames, shape):\n        # ray init\n        if ASV_USE_IMPL == \"modin\":\n            IMPL.DataFrame([])\n        self.shape_id = get_shape_id(shape)\n\n    def setup_cache(self, test_filename=\"io_test_file\"):\n        test_filenames = prepare_io_data_parquet(\n            test_filename, self.data_type, get_benchmark_shapes(self.__class__.__name__)\n        )\n        return test_filenames", "min_run_count": 2, "name": "io.parquet.TimeReadParquet.time_read_parquet", "number": 0, "param_names": ["shape"], "params": [["[5000, 5000]", "[1000000, 10]"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "io.parquet:34", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "de50ba59789f18dda27856d0d9eaa8cfeb5e2f6619377876592c8bc3504a38f0", "warmup_time": -1}, "scalability.scalability_benchmarks.TimeFromPandas.time_from_pandas": {"code": "class TimeFromPandas:\n    def time_from_pandas(self, shape, cpus):\n        execute(from_pandas(self.data))\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeFromPandas:\n    def setup(self, shape, cpus):\n        self.data = pandas.DataFrame(gen_data(\"int\", *shape, RAND_LOW, RAND_HIGH))\n        from modin.config import NPartitions\n    \n        NPartitions.get = lambda: cpus\n        # trigger ray init\n        pd.DataFrame([])", "min_run_count": 2, "name": "scalability.scalability_benchmarks.TimeFromPandas.time_from_pandas", "number": 0, "param_names": ["shape", "cpus"], "params": [["[5000, 5000]", "[1000000, 10]"], ["4", "16", "32"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cc4a5ca812efd1c279310fbcb293956ebf4e6849157d69c0c18294a2c08e5e0c", "warmup_time": -1}, "scalability.scalability_benchmarks.TimeToNumPy.time_to_numpy": {"code": "class TimeToNumPy:\n    def time_to_numpy(self, shape, cpus):\n        # to_numpy is already synchronous\n        to_numpy(self.data)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeToNumPy:\n    def setup(self, shape, cpus):\n        from modin.config import NPartitions\n    \n        NPartitions.get = lambda: cpus\n        self.data = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH, impl=\"modin\")", "min_run_count": 2, "name": "scalability.scalability_benchmarks.TimeToNumPy.time_to_numpy", "number": 0, "param_names": ["shape", "cpus"], "params": [["[5000, 5000]", "[1000000, 10]"], ["4", "16", "32"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b5b0f6c460786e04f50e1eda2f7205b9230c6ef27c63a60a16c0e1087e177305", "warmup_time": -1}, "scalability.scalability_benchmarks.TimeToPandas.time_to_pandas": {"code": "class TimeToPandas:\n    def time_to_pandas(self, shape, cpus):\n        # to_pandas is already synchronous\n        to_pandas(self.data)\n\ndef setup(*args, **kwargs):  # noqa: GL08\n    # This function just needs to be imported into each benchmark file to\n    # set up the random seed before each function. ASV run it automatically.\n    # https://asv.readthedocs.io/en/latest/writing_benchmarks.html\n    np.random.seed(42)\n\nclass TimeToPandas:\n    def setup(self, shape, cpus):\n        from modin.config import NPartitions\n    \n        NPartitions.get = lambda: cpus\n        self.data = generate_dataframe(\"int\", *shape, RAND_LOW, RAND_HIGH, impl=\"modin\")", "min_run_count": 2, "name": "scalability.scalability_benchmarks.TimeToPandas.time_to_pandas", "number": 0, "param_names": ["shape", "cpus"], "params": [["[5000, 5000]", "[1000000, 10]"], ["4", "16", "32"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3106eca659203ee5866be4aacad2009994788a3c1f5b76095d01819300a82a46", "warmup_time": -1}}, "machines": {"xeon-e5": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz", "machine": "xeon-e5", "num_cpu": "44", "os": "Linux 5.4.0-54-generic", "ram": "131910328", "version": 1}, "xeon-e5-pandas": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) CPU E5-2699 v4 @ 2.20GHz", "machine": "xeon-e5-pandas", "num_cpu": "44", "os": "Linux 5.4.0-54-generic", "ram": "131910328", "version": 1}}, "tags": {"0.10.0": 1397, "0.10.1": 1430, "0.10.2": 1468, "0.11.0": 1517, "0.11.1": 1530, "0.11.2": 1559, "0.11.3": 1583, "0.12.0": 1608, "0.12.1": 1677, "0.13.0": 1723, "0.13.1": 1741, "0.13.2": 1755, "0.13.3": 1815, "0.14.0": 1825, "0.14.1": 1861, "0.15.0": 1903, "0.15.1": 1912, "0.15.2": 1924, "0.15.3": 2049, "0.16.0": 2111, "0.16.1": 2124, "0.16.2": 2141, "0.17.0": 2160, "0.17.1": 2193, "0.18.0": 2263, "0.18.1": 2340, "0.19.0": 2409, "0.20.0": 2495, "0.20.1": 2528, "0.21.0": 2600, "0.22.0": 2614, "0.22.1": 2619, "0.22.2": 2633, "0.22.3": 2671, "0.23.0": 2679, "0.23.0rc0": 2638, "0.23.1": 2770, "0.23.1.post0": 2919, "0.24.0": 2827, "0.24.1": 2832, "0.24.1.post0": 2930, "0.24.1.post1": 2930, "0.25.0": 2862, "0.25.1": 2923, "0.26.0": 2970, "0.26.1": 2993, "0.27.0": 3030, "0.27.1": 3207, "0.28.0": 3065, "0.28.1": 3120, "0.28.2": 3131, "0.28.3": 3205, "0.29.0": 3138, "0.29.1": 3204, "0.30.0": 3182, "0.30.1": 3197, "0.7.0": 554, "0.7.1": 582, "0.7.2": 589, "0.7.3": 685, "0.7.4": 874, "0.8.0": 962, "0.8.1": 1083, "0.8.1.1": 1085, "0.8.2": 1146, "0.8.3": 1220, "0.8.3.post0": 1880, "0.8.3.post2": 2065, "0.8.3.post3": 2071, "0.8.3.post4": 2080, "0.9.0": 1302, "0.9.1": 1320, "Modin-v0.1.0": 29, "v0.1.1": 44, "v0.1.2": 52, "v0.2.0": 103, "v0.2.2": 119, "v0.2.3": 142, "v0.2.4": 147, "v0.2.5": 159, "v0.3.0": 246, "v0.3.0rc1": 233, "v0.3.1": 269, "v0.4.0": 284, "v0.4.0rc1": 278, "v0.5.0": 343, "v0.5.1": 356, "v0.5.2": 359, "v0.5.3": 380, "v0.5.4": 406, "v0.6.0": 428, "v0.6.1": 444, "v0.6.2": 457, "v0.6.3": 478}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}